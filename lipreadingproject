{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/kmaha-lakshmi/Algorithmefficiencycoding/blob/main/lipreadingproject\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pHMtRfqJNe73",
        "outputId": "4b9e24be-fa86-419e-fe4a-b5f8b9c263f8"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 1/10\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 162ms/step - accuracy: 0.2235 - loss: 1.8198 - val_accuracy: 0.1900 - val_loss: 1.6157\n",
            "Epoch 2/10\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 95ms/step - accuracy: 0.2177 - loss: 1.6166 - val_accuracy: 0.1850 - val_loss: 1.6096\n",
            "Epoch 3/10\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 91ms/step - accuracy: 0.2428 - loss: 1.6072 - val_accuracy: 0.2050 - val_loss: 1.6115\n",
            "Epoch 4/10\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 91ms/step - accuracy: 0.2410 - loss: 1.6066 - val_accuracy: 0.2350 - val_loss: 1.6101\n",
            "Epoch 5/10\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 129ms/step - accuracy: 0.2885 - loss: 1.5982 - val_accuracy: 0.1900 - val_loss: 1.6121\n",
            "Epoch 6/10\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 121ms/step - accuracy: 0.2226 - loss: 1.6027 - val_accuracy: 0.1900 - val_loss: 1.6135\n",
            "Epoch 7/10\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 97ms/step - accuracy: 0.2597 - loss: 1.5979 - val_accuracy: 0.1900 - val_loss: 1.6137\n",
            "Epoch 8/10\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 104ms/step - accuracy: 0.2616 - loss: 1.5834 - val_accuracy: 0.1900 - val_loss: 1.6175\n",
            "Epoch 9/10\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 149ms/step - accuracy: 0.2460 - loss: 1.5690 - val_accuracy: 0.2150 - val_loss: 1.6149\n",
            "Epoch 10/10\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 102ms/step - accuracy: 0.3736 - loss: 1.5444 - val_accuracy: 0.1900 - val_loss: 1.6277\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "<keras.src.callbacks.history.History at 0x7b12ae9e5a90>"
            ]
          },
          "execution_count": 10,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "import tensorflow as tf\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense\n",
        "import numpy as np\n",
        "import os\n",
        "from sklearn.model_selection import train_test_split\n",
        "X = np.random.rand(1000, 64, 64, 3)\n",
        "y = tf.keras.utils.to_categorical(np.random.randint(0, 5, 1000), num_classes=5)\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n",
        "\n",
        "model = Sequential([\n",
        "    Conv2D(16, (3,3), activation='relu', input_shape=(64, 64, 3)),\n",
        "    MaxPooling2D(2, 2),\n",
        "    Conv2D(32, (3,3), activation='relu'),\n",
        "    MaxPooling2D(2, 2),\n",
        "    Flatten(),\n",
        "    Dense(64, activation='relu'),\n",
        "    Dense(5, activation='softmax')\n",
        "])\n",
        "\n",
        "model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n",
        "model.fit(X_train, y_train, epochs=10, validation_data=(X_test, y_test))\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FoVS1iO5N0s-",
        "outputId": "ac110110-3390-4c81-d519-e0986fb7d355"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Requirement already satisfied: imutils in /usr/local/lib/python3.11/dist-packages (0.5.4)\n",
            "Requirement already satisfied: dlib in /usr/local/lib/python3.11/dist-packages (19.24.6)\n"
          ]
        }
      ],
      "source": [
        "!pip install imutils\n",
        "!pip install dlib"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bI6WeMJlORib",
        "outputId": "b2177e07-75d1-4fd4-899a-6c5c6438d70c"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "--2025-04-07 09:19:16--  http://dlib.net/files/shape_predictor_68_face_landmarks.dat.bz2\n",
            "Resolving dlib.net (dlib.net)... 107.180.26.78\n",
            "Connecting to dlib.net (dlib.net)|107.180.26.78|:80... connected.\n",
            "HTTP request sent, awaiting response... 301 Moved Permanently\n",
            "Location: https://dlib.net/files/shape_predictor_68_face_landmarks.dat.bz2 [following]\n",
            "--2025-04-07 09:19:16--  https://dlib.net/files/shape_predictor_68_face_landmarks.dat.bz2\n",
            "Connecting to dlib.net (dlib.net)|107.180.26.78|:443... connected.\n",
            "HTTP request sent, awaiting response... 200 OK\n",
            "Length: 64040097 (61M)\n",
            "Saving to: ‘shape_predictor_68_face_landmarks.dat.bz2’\n",
            "\n",
            "shape_predictor_68_ 100%[===================>]  61.07M  30.9MB/s    in 2.0s    \n",
            "\n",
            "2025-04-07 09:19:18 (30.9 MB/s) - ‘shape_predictor_68_face_landmarks.dat.bz2’ saved [64040097/64040097]\n",
            "\n",
            "bzip2: Output file shape_predictor_68_face_landmarks.dat already exists.\n"
          ]
        }
      ],
      "source": [
        "!wget http://dlib.net/files/shape_predictor_68_face_landmarks.dat.bz2\n",
        "!bzip2 -d shape_predictor_68_face_landmarks.dat.bz2"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lIjL5HnJCNM4",
        "outputId": "7a2c5597-5b66-48ef-cfd8-dc742924977e"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "fusermount: failed to unmount /content/drive: No such file or directory\n"
          ]
        }
      ],
      "source": [
        "# Unmount if something is already there\n",
        "!fusermount -u /content/drive\n",
        "\n",
        "# Remove the leftover files\n",
        "!rm -rf /content/drive\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lC0yT3E1OWNM",
        "outputId": "924ed1b0-b992-4e8f-acc7-f47b650e37fe"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ],
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "GtPp2BhXO5_C"
      },
      "outputs": [],
      "source": [
        "import os\n",
        "os.chdir('/content/drive/MyDrive/lip_reading')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UEERdAazRZlF",
        "outputId": "3fcf1e88-d1b4-4fb7-a091-5597141ce8ce"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "['id23_vcd_priazn.mpg', 'id2_vcd_swwp2s.mpg', 's1.tar', 's2.tar', 'align', 's1', 's2', 'lip_reading_model.h5']\n"
          ]
        }
      ],
      "source": [
        "print(os.listdir())"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xY2WR42YPiYq",
        "outputId": "f5fda041-caf9-4870-c3ff-482e990898a9"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "align/\n",
            "align/bbaf2n.align\n",
            "align/bbaf3s.align\n",
            "align/bbaf4p.align\n",
            "align/bbaf5a.align\n",
            "align/bbal6n.align\n",
            "align/bbal7s.align\n",
            "align/bbal8p.align\n",
            "align/bbal9a.align\n",
            "align/bbas1s.align\n",
            "align/bbas2p.align\n",
            "align/bbas3a.align\n",
            "align/bbaszn.align\n",
            "align/bbaz4n.align\n",
            "align/bbaz5s.align\n",
            "align/bbaz6p.align\n",
            "align/bbaz7a.align\n",
            "align/bbbf6n.align\n",
            "align/bbbf7s.align\n",
            "align/bbbf8p.align\n",
            "align/bbbf9a.align\n",
            "align/bbbm1s.align\n",
            "align/bbbm2p.align\n",
            "align/bbbm3a.align\n",
            "align/bbbmzn.align\n",
            "align/bbbs4n.align\n",
            "align/bbbs5s.align\n",
            "align/bbbs6p.align\n",
            "align/bbbs7a.align\n",
            "align/bbbz8n.align\n",
            "align/bbbz9s.align\n",
            "align/bbie8n.align\n",
            "align/bbie9s.align\n",
            "align/bbif1a.align\n",
            "align/bbifzp.align\n",
            "align/bbil2n.align\n",
            "align/bbil3s.align\n",
            "align/bbil4p.align\n",
            "align/bbil5a.align\n",
            "align/bbir6n.align\n",
            "align/bbir7s.align\n",
            "align/bbir8p.align\n",
            "align/bbir9a.align\n",
            "align/bbiz1s.align\n",
            "align/bbiz2p.align\n",
            "align/bbiz3a.align\n",
            "align/bbizzn.align\n",
            "align/bbwg1s.align\n",
            "align/bbwg2p.align\n",
            "align/bbwg3a.align\n",
            "align/bbwgzn.align\n",
            "align/bbwm4n.align\n",
            "align/bbwm5s.align\n",
            "align/bbwm6p.align\n",
            "align/bbwm7a.align\n",
            "align/bbws8n.align\n",
            "align/bbws9s.align\n",
            "align/bbwt1a.align\n",
            "align/bbwtzp.align\n",
            "align/bgaa6n.align\n",
            "align/bgaa7s.align\n",
            "align/bgaa8p.align\n",
            "align/bgaa9a.align\n",
            "align/bgah1s.align\n",
            "align/bgah2p.align\n",
            "align/bgah3a.align\n",
            "align/bgahzn.align\n",
            "align/bgan4n.align\n",
            "align/bgan5s.align\n",
            "align/bgan6p.align\n",
            "align/bgan7a.align\n",
            "align/bgat8n.align\n",
            "align/bgat9s.align\n",
            "align/bgau1a.align\n",
            "align/bgauzp.align\n",
            "align/bgbb1s.align\n",
            "align/bgbb2p.align\n",
            "align/bgbb3a.align\n",
            "align/bgbbzn.align\n",
            "align/bgbh4n.align\n",
            "align/bgbh5s.align\n",
            "align/bgbh6p.align\n",
            "align/bgbh7a.align\n",
            "align/bgbn8n.align\n",
            "align/bgbn9s.align\n",
            "align/bgbo1a.align\n",
            "align/bgbozp.align\n",
            "align/bgbu2n.align\n",
            "align/bgbu3s.align\n",
            "align/bgbu4p.align\n",
            "align/bgbu5a.align\n",
            "align/bgia2n.align\n",
            "align/bgia3s.align\n",
            "align/bgia4p.align\n",
            "align/bgia5a.align\n",
            "align/bgig6n.align\n",
            "align/bgig7s.align\n",
            "align/bgig8p.align\n",
            "align/bgig9a.align\n",
            "align/bgin1s.align\n",
            "align/bgin2p.align\n",
            "align/bgin3a.align\n",
            "align/bginzn.align\n",
            "align/bgit4n.align\n",
            "align/bgit5s.align\n",
            "align/bgit6p.align\n",
            "align/bgit7a.align\n",
            "align/bgwb4n.align\n",
            "align/bgwb5s.align\n",
            "align/bgwb6p.align\n",
            "align/bgwb7a.align\n",
            "align/bgwh8n.align\n",
            "align/bgwh9s.align\n",
            "align/bgwi1a.align\n",
            "align/bgwizp.align\n",
            "align/bgwo2n.align\n",
            "align/bgwo3s.align\n",
            "align/bgwo4p.align\n",
            "align/bgwo5a.align\n",
            "align/bgwu6n.align\n",
            "align/bgwu7s.align\n",
            "align/bgwu8p.align\n",
            "align/bgwu9a.align\n",
            "align/braf8n.align\n",
            "align/braf9s.align\n",
            "align/brag1a.align\n",
            "align/bragzp.align\n",
            "align/bram2n.align\n",
            "align/bram3s.align\n",
            "align/bram4p.align\n",
            "align/bram5a.align\n",
            "align/bras6n.align\n",
            "align/bras7s.align\n",
            "align/bras8p.align\n",
            "align/bras9a.align\n",
            "align/brba1a.align\n",
            "align/brbazp.align\n",
            "align/brbg2n.align\n",
            "align/brbg3s.align\n",
            "align/brbg4p.align\n",
            "align/brbg5a.align\n",
            "align/brbm6n.align\n",
            "align/brbm7s.align\n",
            "align/brbm8p.align\n",
            "align/brbm9a.align\n",
            "align/brbt1s.align\n",
            "align/brbt2p.align\n",
            "align/brbt3a.align\n",
            "align/brbtzn.align\n",
            "align/brif4n.align\n",
            "align/brif5s.align\n",
            "align/brif6p.align\n",
            "align/brif7a.align\n",
            "align/bril8n.align\n",
            "align/bril9s.align\n",
            "align/brim1a.align\n",
            "align/brimzp.align\n",
            "align/bris2n.align\n",
            "align/bris3s.align\n",
            "align/bris4p.align\n",
            "align/bris5a.align\n",
            "align/briz6n.align\n",
            "align/briz7s.align\n",
            "align/briz8p.align\n",
            "align/briz9a.align\n",
            "align/brwa2n.align\n",
            "align/brwa3s.align\n",
            "align/brwa4p.align\n",
            "align/brwa5a.align\n",
            "align/brwg6n.align\n",
            "align/brwg7s.align\n",
            "align/brwg8p.align\n",
            "align/brwg9a.align\n",
            "align/brwn1s.align\n",
            "align/brwn2p.align\n",
            "align/brwn3a.align\n",
            "align/brwnzn.align\n",
            "align/brwt4n.align\n",
            "align/brwt5s.align\n",
            "align/brwt6p.align\n",
            "align/brwt7a.align\n",
            "align/bwaa1s.align\n",
            "align/bwaa2p.align\n",
            "align/bwaa3a.align\n",
            "align/bwaazn.align\n",
            "align/bwag4n.align\n",
            "align/bwag5s.align\n",
            "align/bwag6p.align\n",
            "align/bwag7a.align\n",
            "align/bwam8n.align\n",
            "align/bwam9s.align\n",
            "align/bwan1a.align\n",
            "align/bwanzp.align\n",
            "align/bwat2n.align\n",
            "align/bwat3s.align\n",
            "align/bwat4p.align\n",
            "align/bwat5a.align\n",
            "align/bwba4n.align\n",
            "align/bwba5s.align\n",
            "align/bwba6p.align\n",
            "align/bwba7a.align\n",
            "align/bwbg8n.align\n",
            "align/bwbg9s.align\n",
            "align/bwbh1a.align\n",
            "align/bwbhzp.align\n",
            "align/bwbn2n.align\n",
            "align/bwbn3s.align\n",
            "align/bwbn4p.align\n",
            "align/bwbn5a.align\n",
            "align/bwbt6n.align\n",
            "align/bwbt7s.align\n",
            "align/bwbt8p.align\n",
            "align/bwbt9a.align\n",
            "align/bwig1s.align\n",
            "align/bwig2p.align\n",
            "align/bwig3a.align\n",
            "align/bwigzn.align\n",
            "align/bwim4n.align\n",
            "align/bwim5s.align\n",
            "align/bwim6p.align\n",
            "align/bwim7a.align\n",
            "align/bwis8n.align\n",
            "align/bwis9s.align\n",
            "align/bwit1a.align\n",
            "align/bwitzp.align\n",
            "align/bwwa8n.align\n",
            "align/bwwa9s.align\n",
            "align/bwwb1a.align\n",
            "align/bwwbzp.align\n",
            "align/bwwh2n.align\n",
            "align/bwwh3s.align\n",
            "align/bwwh4p.align\n",
            "align/bwwh5a.align\n",
            "align/bwwn6n.align\n",
            "align/bwwn7s.align\n",
            "align/bwwn8p.align\n",
            "align/bwwn9a.align\n",
            "align/bwwu1s.align\n",
            "align/bwwu2p.align\n",
            "align/bwwu3a.align\n",
            "align/bwwuzn.align\n",
            "align/lbad6n.align\n",
            "align/lbad7s.align\n",
            "align/lbad8p.align\n",
            "align/lbad9a.align\n",
            "align/lbak1s.align\n",
            "align/lbak2p.align\n",
            "align/lbak3a.align\n",
            "align/lbakzn.align\n",
            "align/lbaq4n.align\n",
            "align/lbaq5s.align\n",
            "align/lbaq6p.align\n",
            "align/lbaq7a.align\n",
            "align/lbax8n.align\n",
            "align/lbax9s.align\n",
            "align/lbay1a.align\n",
            "align/lbayzp.align\n",
            "align/lbbe1s.align\n",
            "align/lbbe2p.align\n",
            "align/lbbe3a.align\n",
            "align/lbbezn.align\n",
            "align/lbbk4n.align\n",
            "align/lbbk5s.align\n",
            "align/lbbk6p.align\n",
            "align/lbbk7a.align\n",
            "align/lbbq8n.align\n",
            "align/lbbq9s.align\n",
            "align/lbbr1a.align\n",
            "align/lbbrzp.align\n",
            "align/lbby2n.align\n",
            "align/lbby3s.align\n",
            "align/lbby4p.align\n",
            "align/lbby5a.align\n",
            "align/lbid2n.align\n",
            "align/lbid3s.align\n",
            "align/lbid4p.align\n",
            "align/lbid5a.align\n",
            "align/lbij6n.align\n",
            "align/lbij7s.align\n",
            "align/lbij8p.align\n",
            "align/lbij9a.align\n",
            "align/lbiq1s.align\n",
            "align/lbiq2p.align\n",
            "align/lbiq3a.align\n",
            "align/lbiqzn.align\n",
            "align/lbix4n.align\n",
            "align/lbix5s.align\n",
            "align/lbix6p.align\n",
            "align/lbix7a.align\n",
            "align/lbwe4n.align\n",
            "align/lbwe5s.align\n",
            "align/lbwe6p.align\n",
            "align/lbwe7a.align\n",
            "align/lbwk8n.align\n",
            "align/lbwk9s.align\n",
            "align/lbwl1a.align\n",
            "align/lbwlzp.align\n",
            "align/lbwr2n.align\n",
            "align/lbwr3s.align\n",
            "align/lbwr4p.align\n",
            "align/lbwr5a.align\n",
            "align/lbwy6n.align\n",
            "align/lbwy7s.align\n",
            "align/lbwy8p.align\n",
            "align/lbwy9a.align\n",
            "align/lgaf4n.align\n",
            "align/lgaf5s.align\n",
            "align/lgaf6p.align\n",
            "align/lgaf7a.align\n",
            "align/lgal8n.align\n",
            "align/lgal9s.align\n",
            "align/lgam1a.align\n",
            "align/lgamzp.align\n",
            "align/lgas2n.align\n",
            "align/lgas3s.align\n",
            "align/lgas4p.align\n",
            "align/lgas5a.align\n",
            "align/lgaz6n.align\n",
            "align/lgaz7s.align\n",
            "align/lgaz8p.align\n",
            "align/lgaz9a.align\n",
            "align/lgbf8n.align\n",
            "align/lgbf9s.align\n",
            "align/lgbg1a.align\n",
            "align/lgbgzp.align\n",
            "align/lgbm2n.align\n",
            "align/lgbm3s.align\n",
            "align/lgbm4p.align\n",
            "align/lgbm5a.align\n",
            "align/lgbs6n.align\n",
            "align/lgbs7s.align\n",
            "align/lgbs8p.align\n",
            "align/lgbs9a.align\n",
            "align/lgif1s.align\n",
            "align/lgif2p.align\n",
            "align/lgif3a.align\n",
            "align/lgifzn.align\n",
            "align/lgil4n.align\n",
            "align/lgil5s.align\n",
            "align/lgil6p.align\n",
            "align/lgil7a.align\n",
            "align/lgir8n.align\n",
            "align/lgir9s.align\n",
            "align/lgis1a.align\n",
            "align/lgiszp.align\n",
            "align/lgiz2n.align\n",
            "align/lgiz3s.align\n",
            "align/lgiz4p.align\n",
            "align/lgiz5a.align\n",
            "align/lgwa1a.align\n",
            "align/lgwazp.align\n",
            "align/lgwg2n.align\n",
            "align/lgwg3s.align\n",
            "align/lgwg4p.align\n",
            "align/lgwg5a.align\n",
            "align/lgwm6n.align\n",
            "align/lgwm7s.align\n",
            "align/lgwm8p.align\n",
            "align/lgwm9a.align\n",
            "align/lgwt1s.align\n",
            "align/lgwt2p.align\n",
            "align/lgwt3a.align\n",
            "align/lgwtzn.align\n",
            "align/lrae2n.align\n",
            "align/lrae3s.align\n",
            "align/lrae4p.align\n",
            "align/lrae5a.align\n",
            "align/lrak6n.align\n",
            "align/lrak7s.align\n",
            "align/lrak8p.align\n",
            "align/lrak9a.align\n",
            "align/lrar1s.align\n",
            "align/lrar2p.align\n",
            "align/lrar3a.align\n",
            "align/lrarzn.align\n",
            "align/lray4n.align\n",
            "align/lray5s.align\n",
            "align/lray6p.align\n",
            "align/lray7a.align\n",
            "align/lrbe6n.align\n",
            "align/lrbe7s.align\n",
            "align/lrbe8p.align\n",
            "align/lrbe9a.align\n",
            "align/lrbl1s.align\n",
            "align/lrbl2p.align\n",
            "align/lrbl3a.align\n",
            "align/lrblzn.align\n",
            "align/lrbr4n.align\n",
            "align/lrbr5s.align\n",
            "align/lrbr6p.align\n",
            "align/lrbr7a.align\n",
            "align/lrby8n.align\n",
            "align/lrby9s.align\n",
            "align/lrbz1a.align\n",
            "align/lrbzzp.align\n",
            "align/lrid8n.align\n",
            "align/lrid9s.align\n",
            "align/lrie1a.align\n",
            "align/lriezp.align\n",
            "align/lrik2n.align\n",
            "align/lrik3s.align\n",
            "align/lrik4p.align\n",
            "align/lrik5a.align\n",
            "align/lriq6n.align\n",
            "align/lriq7s.align\n",
            "align/lriq8p.align\n",
            "align/lriq9a.align\n",
            "align/lriy1s.align\n",
            "align/lriy2p.align\n",
            "align/lriy3a.align\n",
            "align/lriyzn.align\n",
            "align/lrwf1s.align\n",
            "align/lrwf2p.align\n",
            "align/lrwf3a.align\n",
            "align/lrwfzn.align\n",
            "align/lrwl4n.align\n",
            "align/lrwl5s.align\n",
            "align/lrwl6p.align\n",
            "align/lrwl7a.align\n",
            "align/lrwr8n.align\n",
            "align/lrwr9s.align\n",
            "align/lrws1a.align\n",
            "align/lrwszp.align\n",
            "align/lrwz2n.align\n",
            "align/lrwz3s.align\n",
            "align/lrwz4p.align\n",
            "align/lrwz5a.align\n",
            "align/lwae8n.align\n",
            "align/lwae9s.align\n",
            "align/lwaf1a.align\n",
            "align/lwafzp.align\n",
            "align/lwal2n.align\n",
            "align/lwal3s.align\n",
            "align/lwal4p.align\n",
            "align/lwal5a.align\n",
            "align/lwar6n.align\n",
            "align/lwar7s.align\n",
            "align/lwar8p.align\n",
            "align/lwar9a.align\n",
            "align/lwaz1s.align\n",
            "align/lwaz2p.align\n",
            "align/lwaz3a.align\n",
            "align/lwazzn.align\n",
            "align/lwbf2n.align\n",
            "align/lwbf3s.align\n",
            "align/lwbf4p.align\n",
            "align/lwbf5a.align\n",
            "align/lwbl6n.align\n",
            "align/lwbl7s.align\n",
            "align/lwbl8p.align\n",
            "align/lwbl9a.align\n",
            "align/lwbs1s.align\n",
            "align/lwbs2p.align\n",
            "align/lwbs3a.align\n",
            "align/lwbszn.align\n",
            "align/lwbz4n.align\n",
            "align/lwbz5s.align\n",
            "align/lwbz6p.align\n",
            "align/lwbz7a.align\n",
            "align/lwie4n.align\n",
            "align/lwie5s.align\n",
            "align/lwie6p.align\n",
            "align/lwie7a.align\n",
            "align/lwik8n.align\n",
            "align/lwik9s.align\n",
            "align/lwil1a.align\n",
            "align/lwilzp.align\n",
            "align/lwir2n.align\n",
            "align/lwir3s.align\n",
            "align/lwir4p.align\n",
            "align/lwir5a.align\n",
            "align/lwiy6n.align\n",
            "align/lwiy7s.align\n",
            "align/lwiy8p.align\n",
            "align/lwiy9a.align\n",
            "align/lwwf6n.align\n",
            "align/lwwf7s.align\n",
            "align/lwwf8p.align\n",
            "align/lwwf9a.align\n",
            "align/lwwm1s.align\n",
            "align/lwwm2p.align\n",
            "align/lwwm3a.align\n",
            "align/lwwmzn.align\n",
            "align/lwws4n.align\n",
            "align/lwws5s.align\n",
            "align/lwws6p.align\n",
            "align/lwws7a.align\n",
            "align/lwwz8n.align\n",
            "align/lwwz9s.align\n",
            "align/pbac1s.align\n",
            "align/pbac2p.align\n",
            "align/pbac3a.align\n",
            "align/pbaczn.align\n",
            "align/pbai4n.align\n",
            "align/pbai5s.align\n",
            "align/pbai6p.align\n",
            "align/pbai7a.align\n",
            "align/pbao8n.align\n",
            "align/pbao9s.align\n",
            "align/pbap1a.align\n",
            "align/pbapzp.align\n",
            "align/pbav2n.align\n",
            "align/pbav3s.align\n",
            "align/pbav4p.align\n",
            "align/pbav5a.align\n",
            "align/pbbc4n.align\n",
            "align/pbbc5s.align\n",
            "align/pbbc6p.align\n",
            "align/pbbc7a.align\n",
            "align/pbbi8n.align\n",
            "align/pbbi9s.align\n",
            "align/pbbj1a.align\n",
            "align/pbbjzp.align\n",
            "align/pbbp2n.align\n",
            "align/pbbp3s.align\n",
            "align/pbbp4p.align\n",
            "align/pbbp5a.align\n",
            "align/pbbv6n.align\n",
            "align/pbbv7s.align\n",
            "align/pbbv8p.align\n",
            "align/pbbv9a.align\n",
            "align/pbib6n.align\n",
            "align/pbib7s.align\n",
            "align/pbib8p.align\n",
            "align/pbib9a.align\n",
            "align/pbii1s.align\n",
            "align/pbii2p.align\n",
            "align/pbii3a.align\n",
            "align/pbiizn.align\n",
            "align/pbio4n.align\n",
            "align/pbio5s.align\n",
            "align/pbio6p.align\n",
            "align/pbio7a.align\n",
            "align/pbiu8n.align\n",
            "align/pbiu9s.align\n",
            "align/pbiv1a.align\n",
            "align/pbivzp.align\n",
            "align/pbwc8n.align\n",
            "align/pbwc9s.align\n",
            "align/pbwd1a.align\n",
            "align/pbwdzp.align\n",
            "align/pbwj2n.align\n",
            "align/pbwj3s.align\n",
            "align/pbwj4p.align\n",
            "align/pbwj5a.align\n",
            "align/pbwp6n.align\n",
            "align/pbwp7s.align\n",
            "align/pbwp8p.align\n",
            "align/pbwp9a.align\n",
            "align/pbwx1s.align\n",
            "align/pbwx2p.align\n",
            "align/pbwx3a.align\n",
            "align/pbwxzn.align\n",
            "align/pgad8n.align\n",
            "align/pgad9s.align\n",
            "align/pgae1a.align\n",
            "align/pgaezp.align\n",
            "align/pgak2n.align\n",
            "align/pgak3s.align\n",
            "align/pgak4p.align\n",
            "align/pgak5a.align\n",
            "align/pgaq6n.align\n",
            "align/pgaq7s.align\n",
            "align/pgaq8p.align\n",
            "align/pgaq9a.align\n",
            "align/pgay1s.align\n",
            "align/pgay2p.align\n",
            "align/pgay3a.align\n",
            "align/pgayzn.align\n",
            "align/pgbe2n.align\n",
            "align/pgbe3s.align\n",
            "align/pgbe4p.align\n",
            "align/pgbe5a.align\n",
            "align/pgbk6n.align\n",
            "align/pgbk7s.align\n",
            "align/pgbk8p.align\n",
            "align/pgbk9a.align\n",
            "align/pgbr1s.align\n",
            "align/pgbr2p.align\n",
            "align/pgbr3a.align\n",
            "align/pgbrzn.align\n",
            "align/pgby4n.align\n",
            "align/pgby5s.align\n",
            "align/pgby6p.align\n",
            "align/pgby7a.align\n",
            "align/pgid4n.align\n",
            "align/pgid5s.align\n",
            "align/pgid6p.align\n",
            "align/pgid7a.align\n",
            "align/pgij8n.align\n",
            "align/pgij9s.align\n",
            "align/pgik1a.align\n",
            "align/pgikzp.align\n",
            "align/pgiq2n.align\n",
            "align/pgiq3s.align\n",
            "align/pgiq4p.align\n",
            "align/pgiq5a.align\n",
            "align/pgix6n.align\n",
            "align/pgix7s.align\n",
            "align/pgix8p.align\n",
            "align/pgix9a.align\n",
            "align/pgwe6n.align\n",
            "align/pgwe7s.align\n",
            "align/pgwe8p.align\n",
            "align/pgwe9a.align\n",
            "align/pgwl1s.align\n",
            "align/pgwl2p.align\n",
            "align/pgwl3a.align\n",
            "align/pgwlzn.align\n",
            "align/pgwr4n.align\n",
            "align/pgwr5s.align\n",
            "align/pgwr6p.align\n",
            "align/pgwr7a.align\n",
            "align/pgwy8n.align\n",
            "align/pgwy9s.align\n",
            "align/pgwz1a.align\n",
            "align/pgwzzp.align\n",
            "align/prac6n.align\n",
            "align/prac7s.align\n",
            "align/prac8p.align\n",
            "align/prac9a.align\n",
            "align/praj1s.align\n",
            "align/praj2p.align\n",
            "align/praj3a.align\n",
            "align/prajzn.align\n",
            "align/prap4n.align\n",
            "align/prap5s.align\n",
            "align/prap6p.align\n",
            "align/prap7a.align\n",
            "align/prav8n.align\n",
            "align/prav9s.align\n",
            "align/prax1a.align\n",
            "align/praxzp.align\n",
            "align/prbd1s.align\n",
            "align/prbd2p.align\n",
            "align/prbd3a.align\n",
            "align/prbdzn.align\n",
            "align/prbj4n.align\n",
            "align/prbj5s.align\n",
            "align/prbj6p.align\n",
            "align/prbj7a.align\n",
            "align/prbp8n.align\n",
            "align/prbp9s.align\n",
            "align/prbq1a.align\n",
            "align/prbqzp.align\n",
            "align/prbx2n.align\n",
            "align/prbx3s.align\n",
            "align/prbx4p.align\n",
            "align/prbx5a.align\n",
            "align/pric2n.align\n",
            "align/pric3s.align\n",
            "align/pric4p.align\n",
            "align/pric5a.align\n",
            "align/prii6n.align\n",
            "align/prii7s.align\n",
            "align/prii8p.align\n",
            "align/prii9a.align\n",
            "align/prip1s.align\n",
            "align/prip2p.align\n",
            "align/prip3a.align\n",
            "align/pripzn.align\n",
            "align/priv4n.align\n",
            "align/priv5s.align\n",
            "align/priv6p.align\n",
            "align/priv7a.align\n",
            "align/prwd4n.align\n",
            "align/prwd5s.align\n",
            "align/prwd6p.align\n",
            "align/prwd7a.align\n",
            "align/prwj8n.align\n",
            "align/prwj9s.align\n",
            "align/prwk1a.align\n",
            "align/prwkzp.align\n",
            "align/prwq2n.align\n",
            "align/prwq3s.align\n",
            "align/prwq4p.align\n",
            "align/prwq5a.align\n",
            "align/prwx6n.align\n",
            "align/prwx7s.align\n",
            "align/prwx8p.align\n",
            "align/prwx9a.align\n",
            "align/pwad2n.align\n",
            "align/pwad3s.align\n",
            "align/pwad4p.align\n",
            "align/pwad5a.align\n",
            "align/pwaj6n.align\n",
            "align/pwaj7s.align\n",
            "align/pwaj8p.align\n",
            "align/pwaj9a.align\n",
            "align/pwaq1s.align\n",
            "align/pwaq2p.align\n",
            "align/pwaq3a.align\n",
            "align/pwaqzn.align\n",
            "align/pwax4n.align\n",
            "align/pwax5s.align\n",
            "align/pwax6p.align\n",
            "align/pwax7a.align\n",
            "align/pwbd6n.align\n",
            "align/pwbd7s.align\n",
            "align/pwbd8p.align\n",
            "align/pwbd9a.align\n",
            "align/pwbk1s.align\n",
            "align/pwbk2p.align\n",
            "align/pwbk3a.align\n",
            "align/pwbkzn.align\n",
            "align/pwbq4n.align\n",
            "align/pwbq5s.align\n",
            "align/pwbq6p.align\n",
            "align/pwbq7a.align\n",
            "align/pwbx8n.align\n",
            "align/pwbx9s.align\n",
            "align/pwby1a.align\n",
            "align/pwbyzp.align\n",
            "align/pwic8n.align\n",
            "align/pwic9s.align\n",
            "align/pwid1a.align\n",
            "align/pwidzp.align\n",
            "align/pwij2n.align\n",
            "align/pwij3s.align\n",
            "align/pwij4p.align\n",
            "align/pwij5a.align\n",
            "align/pwip6n.align\n",
            "align/pwip7s.align\n",
            "align/pwip8p.align\n",
            "align/pwip9a.align\n",
            "align/pwix1s.align\n",
            "align/pwix2p.align\n",
            "align/pwix3a.align\n",
            "align/pwixzn.align\n",
            "align/pwwe1s.align\n",
            "align/pwwe2p.align\n",
            "align/pwwe3a.align\n",
            "align/pwwezn.align\n",
            "align/pwwk4n.align\n",
            "align/pwwk5s.align\n",
            "align/pwwk6p.align\n",
            "align/pwwk7a.align\n",
            "align/pwwq8n.align\n",
            "align/pwwq9s.align\n",
            "align/pwwr1a.align\n",
            "align/pwwrzp.align\n",
            "align/pwwy2n.align\n",
            "align/pwwy3s.align\n",
            "align/pwwy4p.align\n",
            "align/pwwy5a.align\n",
            "align/sbaa4n.align\n",
            "align/sbaa5s.align\n",
            "align/sbaa6p.align\n",
            "align/sbaa7a.align\n",
            "align/sbag8n.align\n",
            "align/sbag9s.align\n",
            "align/sbah1a.align\n",
            "align/sbahzp.align\n",
            "align/sban2n.align\n",
            "align/sban3s.align\n",
            "align/sban4p.align\n",
            "align/sban5a.align\n",
            "align/sbat6n.align\n",
            "align/sbat7s.align\n",
            "align/sbat8p.align\n",
            "align/sbat9a.align\n",
            "align/sbba8n.align\n",
            "align/sbba9s.align\n",
            "align/sbbb1a.align\n",
            "align/sbbbzp.align\n",
            "align/sbbh2n.align\n",
            "align/sbbh3s.align\n",
            "align/sbbh4p.align\n",
            "align/sbbh5a.align\n",
            "align/sbbn6n.align\n",
            "align/sbbn7s.align\n",
            "align/sbbn8p.align\n",
            "align/sbbn9a.align\n",
            "align/sbbu1s.align\n",
            "align/sbbu2p.align\n",
            "align/sbbu3a.align\n",
            "align/sbbuzn.align\n",
            "align/sbia1s.align\n",
            "align/sbia2p.align\n",
            "align/sbia3a.align\n",
            "align/sbiazn.align\n",
            "align/sbig4n.align\n",
            "align/sbig5s.align\n",
            "align/sbig6p.align\n",
            "align/sbig7a.align\n",
            "align/sbim8n.align\n",
            "align/sbim9s.align\n",
            "align/sbin1a.align\n",
            "align/sbinzp.align\n",
            "align/sbit2n.align\n",
            "align/sbit3s.align\n",
            "align/sbit4p.align\n",
            "align/sbit5a.align\n",
            "align/sbwb2n.align\n",
            "align/sbwb3s.align\n",
            "align/sbwb4p.align\n",
            "align/sbwb5a.align\n",
            "align/sbwh6n.align\n",
            "align/sbwh7s.align\n",
            "align/sbwh8p.align\n",
            "align/sbwh9a.align\n",
            "align/sbwo1s.align\n",
            "align/sbwo2p.align\n",
            "align/sbwo3a.align\n",
            "align/sbwozn.align\n",
            "align/sbwu4n.align\n",
            "align/sbwu5s.align\n",
            "align/sbwu6p.align\n",
            "align/sbwu7a.align\n",
            "align/sgac2n.align\n",
            "align/sgac3s.align\n",
            "align/sgac4p.align\n",
            "align/sgac5a.align\n",
            "align/sgai6n.align\n",
            "align/sgai7s.align\n",
            "align/sgai8p.align\n",
            "align/sgai9a.align\n",
            "align/sgap1s.align\n",
            "align/sgap2p.align\n",
            "align/sgap3a.align\n",
            "align/sgapzn.align\n",
            "align/sgav4n.align\n",
            "align/sgav5s.align\n",
            "align/sgav6p.align\n",
            "align/sgav7a.align\n",
            "align/sgbc6n.align\n",
            "align/sgbc7s.align\n",
            "align/sgbc8p.align\n",
            "align/sgbc9a.align\n",
            "align/sgbj1s.align\n",
            "align/sgbj2p.align\n",
            "align/sgbj3a.align\n",
            "align/sgbjzn.align\n",
            "align/sgbp4n.align\n",
            "align/sgbp5s.align\n",
            "align/sgbp6p.align\n",
            "align/sgbp7a.align\n",
            "align/sgbv8n.align\n",
            "align/sgbv9s.align\n",
            "align/sgbx1a.align\n",
            "align/sgbxzp.align\n",
            "align/sgib8n.align\n",
            "align/sgib9s.align\n",
            "align/sgic1a.align\n",
            "align/sgiczp.align\n",
            "align/sgii2n.align\n",
            "align/sgii3s.align\n",
            "align/sgii4p.align\n",
            "align/sgii5a.align\n",
            "align/sgio6n.align\n",
            "align/sgio7s.align\n",
            "align/sgio8p.align\n",
            "align/sgio9a.align\n",
            "align/sgiv1s.align\n",
            "align/sgiv2p.align\n",
            "align/sgiv3a.align\n",
            "align/sgivzn.align\n",
            "align/sgwd1s.align\n",
            "align/sgwd2p.align\n",
            "align/sgwd3a.align\n",
            "align/sgwdzn.align\n",
            "align/sgwj4n.align\n",
            "align/sgwj5s.align\n",
            "align/sgwj6p.align\n",
            "align/sgwj7a.align\n",
            "align/sgwp8n.align\n",
            "align/sgwp9s.align\n",
            "align/sgwq1a.align\n",
            "align/sgwqzp.align\n",
            "align/sgwx2n.align\n",
            "align/sgwx3s.align\n",
            "align/sgwx4p.align\n",
            "align/sgwx5a.align\n",
            "align/srab1s.align\n",
            "align/srab2p.align\n",
            "align/srab3a.align\n",
            "align/srabzn.align\n",
            "align/srah4n.align\n",
            "align/srah5s.align\n",
            "align/srah6p.align\n",
            "align/srah7a.align\n",
            "align/sran8n.align\n",
            "align/sran9s.align\n",
            "align/srao1a.align\n",
            "align/sraozp.align\n",
            "align/srau2n.align\n",
            "align/srau3s.align\n",
            "align/srau4p.align\n",
            "align/srau5a.align\n",
            "align/srbb4n.align\n",
            "align/srbb5s.align\n",
            "align/srbb6p.align\n",
            "align/srbb7a.align\n",
            "align/srbh8n.align\n",
            "align/srbh9s.align\n",
            "align/srbi1a.align\n",
            "align/srbizp.align\n",
            "align/srbo2n.align\n",
            "align/srbo3s.align\n",
            "align/srbo4p.align\n",
            "align/srbo5a.align\n",
            "align/srbu6n.align\n",
            "align/srbu7s.align\n",
            "align/srbu8p.align\n",
            "align/srbu9a.align\n",
            "align/sria6n.align\n",
            "align/sria7s.align\n",
            "align/sria8p.align\n",
            "align/sria9a.align\n",
            "align/srih1s.align\n",
            "align/srih2p.align\n",
            "align/srih3a.align\n",
            "align/srihzn.align\n",
            "align/srin4n.align\n",
            "align/srin5s.align\n",
            "align/srin6p.align\n",
            "align/srin7a.align\n",
            "align/srit8n.align\n",
            "align/srit9s.align\n",
            "align/sriu1a.align\n",
            "align/sriuzp.align\n",
            "align/srwb8n.align\n",
            "align/srwb9s.align\n",
            "align/srwc1a.align\n",
            "align/srwczp.align\n",
            "align/srwi2n.align\n",
            "align/srwi3s.align\n",
            "align/srwi4p.align\n",
            "align/srwi5a.align\n",
            "align/srwo6n.align\n",
            "align/srwo7s.align\n",
            "align/srwo8p.align\n",
            "align/srwo9a.align\n",
            "align/srwv1s.align\n",
            "align/srwv2p.align\n",
            "align/srwv3a.align\n",
            "align/srwvzn.align\n",
            "align/swab6n.align\n",
            "align/swab7s.align\n",
            "align/swab8p.align\n",
            "align/swab9a.align\n",
            "align/swai1s.align\n",
            "align/swai2p.align\n",
            "align/swai3a.align\n",
            "align/swaizn.align\n",
            "align/swao4n.align\n",
            "align/swao5s.align\n",
            "align/swao6p.align\n",
            "align/swao7a.align\n",
            "align/swau8n.align\n",
            "align/swau9s.align\n",
            "align/swav1a.align\n",
            "align/swavzp.align\n",
            "align/swbc1s.align\n",
            "align/swbc2p.align\n",
            "align/swbc3a.align\n",
            "align/swbczn.align\n",
            "align/swbi4n.align\n",
            "align/swbi5s.align\n",
            "align/swbi6p.align\n",
            "align/swbi7a.align\n",
            "align/swbo8n.align\n",
            "align/swbo9s.align\n",
            "align/swbp1a.align\n",
            "align/swbpzp.align\n",
            "align/swbv2n.align\n",
            "align/swbv3s.align\n",
            "align/swbv4p.align\n",
            "align/swbv5a.align\n",
            "align/swib2n.align\n",
            "align/swib3s.align\n",
            "align/swib4p.align\n",
            "align/swib5a.align\n",
            "align/swih6n.align\n",
            "align/swih7s.align\n",
            "align/swih8p.align\n",
            "align/swih9a.align\n",
            "align/swio1s.align\n",
            "align/swio2p.align\n",
            "align/swio3a.align\n",
            "align/swiozn.align\n",
            "align/swiu4n.align\n",
            "align/swiu5s.align\n",
            "align/swiu6p.align\n",
            "align/swiu7a.align\n",
            "align/swwc4n.align\n",
            "align/swwc5s.align\n",
            "align/swwc6p.align\n",
            "align/swwc7a.align\n",
            "align/swwi8n.align\n",
            "align/swwi9s.align\n",
            "align/swwj1a.align\n",
            "align/swwjzp.align\n",
            "align/swwp2n.align\n",
            "align/swwp3s.align\n",
            "align/swwp4p.align\n",
            "align/swwp5a.align\n",
            "align/swwv6n.align\n",
            "align/swwv7s.align\n",
            "align/swwv8p.align\n",
            "align/swwv9a.align\n",
            "align/\n",
            "align/bbaf1n.align\n",
            "align/bbaf2s.align\n",
            "align/bbaf3p.align\n",
            "align/bbaf4a.align\n",
            "align/bbal5n.align\n",
            "align/bbal6s.align\n",
            "align/bbal7p.align\n",
            "align/bbal8a.align\n",
            "align/bbar9n.align\n",
            "align/bbas1p.align\n",
            "align/bbas2a.align\n",
            "align/bbaszs.align\n",
            "align/bbaz3n.align\n",
            "align/bbaz4s.align\n",
            "align/bbaz5p.align\n",
            "align/bbaz6a.align\n",
            "align/bbbf5n.align\n",
            "align/bbbf6s.align\n",
            "align/bbbf7p.align\n",
            "align/bbbf8a.align\n",
            "align/bbbl9n.align\n",
            "align/bbbm1p.align\n",
            "align/bbbm2a.align\n",
            "align/bbbmzs.align\n",
            "align/bbbs3n.align\n",
            "align/bbbs4s.align\n",
            "align/bbbs5p.align\n",
            "align/bbbs6a.align\n",
            "align/bbbz7n.align\n",
            "align/bbbz8s.align\n",
            "align/bbbz9p.align\n",
            "align/bbie7n.align\n",
            "align/bbie8s.align\n",
            "align/bbie9p.align\n",
            "align/bbifza.align\n",
            "align/bbil1n.align\n",
            "align/bbil2s.align\n",
            "align/bbil3p.align\n",
            "align/bbil4a.align\n",
            "align/bbir5n.align\n",
            "align/bbir6s.align\n",
            "align/bbir7p.align\n",
            "align/bbir8a.align\n",
            "align/bbiy9n.align\n",
            "align/bbiz1p.align\n",
            "align/bbiz2a.align\n",
            "align/bbizzs.align\n",
            "align/bbwf9n.align\n",
            "align/bbwg1p.align\n",
            "align/bbwg2a.align\n",
            "align/bbwgzs.align\n",
            "align/bbwm3n.align\n",
            "align/bbwm4s.align\n",
            "align/bbwm5p.align\n",
            "align/bbwm6a.align\n",
            "align/bbws7n.align\n",
            "align/bbws8s.align\n",
            "align/bbws9p.align\n",
            "align/bbwtza.align\n",
            "align/bgaa5n.align\n",
            "align/bgaa6s.align\n",
            "align/bgaa7p.align\n",
            "align/bgaa8a.align\n",
            "align/bgag9n.align\n",
            "align/bgah1p.align\n",
            "align/bgah2a.align\n",
            "align/bgahzs.align\n",
            "align/bgan3n.align\n",
            "align/bgan4s.align\n",
            "align/bgan5p.align\n",
            "align/bgan6a.align\n",
            "align/bgat7n.align\n",
            "align/bgat8s.align\n",
            "align/bgat9p.align\n",
            "align/bgauza.align\n",
            "align/bgba9n.align\n",
            "align/bgbb1p.align\n",
            "align/bgbb2a.align\n",
            "align/bgbbzs.align\n",
            "align/bgbh3n.align\n",
            "align/bgbh4s.align\n",
            "align/bgbh5p.align\n",
            "align/bgbh6a.align\n",
            "align/bgbn7n.align\n",
            "align/bgbn8s.align\n",
            "align/bgbn9p.align\n",
            "align/bgboza.align\n",
            "align/bgbu1n.align\n",
            "align/bgbu2s.align\n",
            "align/bgbu3p.align\n",
            "align/bgbu4a.align\n",
            "align/bgia1n.align\n",
            "align/bgia2s.align\n",
            "align/bgia3p.align\n",
            "align/bgia4a.align\n",
            "align/bgig5n.align\n",
            "align/bgig6s.align\n",
            "align/bgig7p.align\n",
            "align/bgig8a.align\n",
            "align/bgim9n.align\n",
            "align/bgin1p.align\n",
            "align/bgin2a.align\n",
            "align/bginzs.align\n",
            "align/bgit3n.align\n",
            "align/bgit4s.align\n",
            "align/bgit5p.align\n",
            "align/bgit6a.align\n",
            "align/bgwb3n.align\n",
            "align/bgwb4s.align\n",
            "align/bgwb5p.align\n",
            "align/bgwb6a.align\n",
            "align/bgwh7n.align\n",
            "align/bgwh8s.align\n",
            "align/bgwh9p.align\n",
            "align/bgwiza.align\n",
            "align/bgwo1n.align\n",
            "align/bgwo2s.align\n",
            "align/bgwo3p.align\n",
            "align/bgwo4a.align\n",
            "align/bgwu5n.align\n",
            "align/bgwu6s.align\n",
            "align/bgwu7p.align\n",
            "align/bgwu8a.align\n",
            "align/braf7n.align\n",
            "align/braf8s.align\n",
            "align/braf9p.align\n",
            "align/bragza.align\n",
            "align/bram1n.align\n",
            "align/bram2s.align\n",
            "align/bram3p.align\n",
            "align/bram4a.align\n",
            "align/bras5n.align\n",
            "align/bras6s.align\n",
            "align/bras7p.align\n",
            "align/bras8a.align\n",
            "align/braz9n.align\n",
            "align/brbaza.align\n",
            "align/brbg1n.align\n",
            "align/brbg2s.align\n",
            "align/brbg3p.align\n",
            "align/brbg4a.align\n",
            "align/brbm5n.align\n",
            "align/brbm6s.align\n",
            "align/brbm7p.align\n",
            "align/brbm8a.align\n",
            "align/brbs9n.align\n",
            "align/brbt1p.align\n",
            "align/brbt2a.align\n",
            "align/brbtzs.align\n",
            "align/brif3n.align\n",
            "align/brif4s.align\n",
            "align/brif5p.align\n",
            "align/brif6a.align\n",
            "align/bril7n.align\n",
            "align/bril8s.align\n",
            "align/bril9p.align\n",
            "align/brimza.align\n",
            "align/bris1n.align\n",
            "align/bris2s.align\n",
            "align/bris3p.align\n",
            "align/bris4a.align\n",
            "align/briz5n.align\n",
            "align/briz6s.align\n",
            "align/briz7p.align\n",
            "align/briz8a.align\n",
            "align/brwa1n.align\n",
            "align/brwa2s.align\n",
            "align/brwa3p.align\n",
            "align/brwa4a.align\n",
            "align/brwg5n.align\n",
            "align/brwg6s.align\n",
            "align/brwg7p.align\n",
            "align/brwg8a.align\n",
            "align/brwm9n.align\n",
            "align/brwn1p.align\n",
            "align/brwn2a.align\n",
            "align/brwnzs.align\n",
            "align/brwt3n.align\n",
            "align/brwt4s.align\n",
            "align/brwt5p.align\n",
            "align/brwt6a.align\n",
            "align/bwaa1p.align\n",
            "align/bwaa2a.align\n",
            "align/bwaazs.align\n",
            "align/bwag3n.align\n",
            "align/bwag4s.align\n",
            "align/bwag5p.align\n",
            "align/bwag6a.align\n",
            "align/bwam7n.align\n",
            "align/bwam8s.align\n",
            "align/bwam9p.align\n",
            "align/bwanza.align\n",
            "align/bwat1n.align\n",
            "align/bwat2s.align\n",
            "align/bwat3p.align\n",
            "align/bwat4a.align\n",
            "align/bwba3n.align\n",
            "align/bwba4s.align\n",
            "align/bwba5p.align\n",
            "align/bwba6a.align\n",
            "align/bwbg7n.align\n",
            "align/bwbg8s.align\n",
            "align/bwbg9p.align\n",
            "align/bwbhza.align\n",
            "align/bwbn1n.align\n",
            "align/bwbn2s.align\n",
            "align/bwbn3p.align\n",
            "align/bwbn4a.align\n",
            "align/bwbt5n.align\n",
            "align/bwbt6s.align\n",
            "align/bwbt7p.align\n",
            "align/bwbt8a.align\n",
            "align/bwif9n.align\n",
            "align/bwig1p.align\n",
            "align/bwig2a.align\n",
            "align/bwigzs.align\n",
            "align/bwim3n.align\n",
            "align/bwim4s.align\n",
            "align/bwim5p.align\n",
            "align/bwim6a.align\n",
            "align/bwis7n.align\n",
            "align/bwis8s.align\n",
            "align/bwis9p.align\n",
            "align/bwitza.align\n",
            "align/bwwa7n.align\n",
            "align/bwwa8s.align\n",
            "align/bwwa9p.align\n",
            "align/bwwbza.align\n",
            "align/bwwh1n.align\n",
            "align/bwwh2s.align\n",
            "align/bwwh3p.align\n",
            "align/bwwh4a.align\n",
            "align/bwwn5n.align\n",
            "align/bwwn6s.align\n",
            "align/bwwn7p.align\n",
            "align/bwwn8a.align\n",
            "align/bwwt9n.align\n",
            "align/bwwu1p.align\n",
            "align/bwwu2a.align\n",
            "align/bwwuzs.align\n",
            "align/lbad5n.align\n",
            "align/lbad6s.align\n",
            "align/lbad7p.align\n",
            "align/lbad8a.align\n",
            "align/lbaj9n.align\n",
            "align/lbak1p.align\n",
            "align/lbak2a.align\n",
            "align/lbakzs.align\n",
            "align/lbaq3n.align\n",
            "align/lbaq4s.align\n",
            "align/lbaq5p.align\n",
            "align/lbaq6a.align\n",
            "align/lbax7n.align\n",
            "align/lbax8s.align\n",
            "align/lbax9p.align\n",
            "align/lbayza.align\n",
            "align/lbbd9n.align\n",
            "align/lbbe1p.align\n",
            "align/lbbe2a.align\n",
            "align/lbbezs.align\n",
            "align/lbbk3n.align\n",
            "align/lbbk4s.align\n",
            "align/lbbk5p.align\n",
            "align/lbbk6a.align\n",
            "align/lbbq7n.align\n",
            "align/lbbq8s.align\n",
            "align/lbbq9p.align\n",
            "align/lbbrza.align\n",
            "align/lbby1n.align\n",
            "align/lbby2s.align\n",
            "align/lbby3p.align\n",
            "align/lbby4a.align\n",
            "align/lbid1n.align\n",
            "align/lbid2s.align\n",
            "align/lbid3p.align\n",
            "align/lbid4a.align\n",
            "align/lbij5n.align\n",
            "align/lbij6s.align\n",
            "align/lbij7p.align\n",
            "align/lbij8a.align\n",
            "align/lbip9n.align\n",
            "align/lbiq1p.align\n",
            "align/lbiq2a.align\n",
            "align/lbiqzs.align\n",
            "align/lbix3n.align\n",
            "align/lbix4s.align\n",
            "align/lbix5p.align\n",
            "align/lbix6a.align\n",
            "align/lbwe3n.align\n",
            "align/lbwe4s.align\n",
            "align/lbwe5p.align\n",
            "align/lbwe6a.align\n",
            "align/lbwk7n.align\n",
            "align/lbwk8s.align\n",
            "align/lbwk9p.align\n",
            "align/lbwlza.align\n",
            "align/lbwr1n.align\n",
            "align/lbwr2s.align\n",
            "align/lbwr3p.align\n",
            "align/lbwr4a.align\n",
            "align/lbwy5n.align\n",
            "align/lbwy6s.align\n",
            "align/lbwy7p.align\n",
            "align/lbwy8a.align\n",
            "align/lgaf3n.align\n",
            "align/lgaf4s.align\n",
            "align/lgaf5p.align\n",
            "align/lgaf6a.align\n",
            "align/lgal7n.align\n",
            "align/lgal8s.align\n",
            "align/lgal9p.align\n",
            "align/lgamza.align\n",
            "align/lgas1n.align\n",
            "align/lgas2s.align\n",
            "align/lgas3p.align\n",
            "align/lgas4a.align\n",
            "align/lgaz5n.align\n",
            "align/lgaz6s.align\n",
            "align/lgaz7p.align\n",
            "align/lgaz8a.align\n",
            "align/lgbf7n.align\n",
            "align/lgbf8s.align\n",
            "align/lgbf9p.align\n",
            "align/lgbgza.align\n",
            "align/lgbm1n.align\n",
            "align/lgbm2s.align\n",
            "align/lgbm3p.align\n",
            "align/lgbm4a.align\n",
            "align/lgbs5n.align\n",
            "align/lgbs6s.align\n",
            "align/lgbs7p.align\n",
            "align/lgbs8a.align\n",
            "align/lgbz9n.align\n",
            "align/lgie9n.align\n",
            "align/lgif1p.align\n",
            "align/lgif2a.align\n",
            "align/lgifzs.align\n",
            "align/lgil3n.align\n",
            "align/lgil4s.align\n",
            "align/lgil5p.align\n",
            "align/lgil6a.align\n",
            "align/lgir7n.align\n",
            "align/lgir8s.align\n",
            "align/lgir9p.align\n",
            "align/lgisza.align\n",
            "align/lgiz1n.align\n",
            "align/lgiz2s.align\n",
            "align/lgiz3p.align\n",
            "align/lgiz4a.align\n",
            "align/lgwaza.align\n",
            "align/lgwg1n.align\n",
            "align/lgwg2s.align\n",
            "align/lgwg3p.align\n",
            "align/lgwg4a.align\n",
            "align/lgwm5n.align\n",
            "align/lgwm6s.align\n",
            "align/lgwm7p.align\n",
            "align/lgwm8a.align\n",
            "align/lgws9n.align\n",
            "align/lgwt1p.align\n",
            "align/lgwt2a.align\n",
            "align/lgwtzs.align\n",
            "align/lrae1n.align\n",
            "align/lrae2s.align\n",
            "align/lrae3p.align\n",
            "align/lrae4a.align\n",
            "align/lrak5n.align\n",
            "align/lrak6s.align\n",
            "align/lrak7p.align\n",
            "align/lrak8a.align\n",
            "align/lraq9n.align\n",
            "align/lrar1p.align\n",
            "align/lrar2a.align\n",
            "align/lrarzs.align\n",
            "align/lray3n.align\n",
            "align/lray4s.align\n",
            "align/lray5p.align\n",
            "align/lray6a.align\n",
            "align/lrbe5n.align\n",
            "align/lrbe6s.align\n",
            "align/lrbe7p.align\n",
            "align/lrbe8a.align\n",
            "align/lrbk9n.align\n",
            "align/lrbl1p.align\n",
            "align/lrbl2a.align\n",
            "align/lrblzs.align\n",
            "align/lrbr3n.align\n",
            "align/lrbr4s.align\n",
            "align/lrbr5p.align\n",
            "align/lrbr6a.align\n",
            "align/lrby7n.align\n",
            "align/lrby8s.align\n",
            "align/lrby9p.align\n",
            "align/lrbzza.align\n",
            "align/lrid7n.align\n",
            "align/lrid8s.align\n",
            "align/lrid9p.align\n",
            "align/lrieza.align\n",
            "align/lrik1n.align\n",
            "align/lrik2s.align\n",
            "align/lrik3p.align\n",
            "align/lrik4a.align\n",
            "align/lriq5n.align\n",
            "align/lriq6s.align\n",
            "align/lriq7p.align\n",
            "align/lriq8a.align\n",
            "align/lrix9n.align\n",
            "align/lriy1p.align\n",
            "align/lriy2a.align\n",
            "align/lriyzs.align\n",
            "align/lrwe9n.align\n",
            "align/lrwf1p.align\n",
            "align/lrwf2a.align\n",
            "align/lrwfzs.align\n",
            "align/lrwl3n.align\n",
            "align/lrwl4s.align\n",
            "align/lrwl5p.align\n",
            "align/lrwl6a.align\n",
            "align/lrwr7n.align\n",
            "align/lrwr8s.align\n",
            "align/lrwr9p.align\n",
            "align/lrwsza.align\n",
            "align/lrwz1n.align\n",
            "align/lrwz2s.align\n",
            "align/lrwz3p.align\n",
            "align/lrwz4a.align\n",
            "align/lwae7n.align\n",
            "align/lwae8s.align\n",
            "align/lwae9p.align\n",
            "align/lwafza.align\n",
            "align/lwal1n.align\n",
            "align/lwal2s.align\n",
            "align/lwal3p.align\n",
            "align/lwal4a.align\n",
            "align/lwar5n.align\n",
            "align/lwar6s.align\n",
            "align/lwar7p.align\n",
            "align/lwar8a.align\n",
            "align/lway9n.align\n",
            "align/lwaz1p.align\n",
            "align/lwaz2a.align\n",
            "align/lwazzs.align\n",
            "align/lwbf1n.align\n",
            "align/lwbf2s.align\n",
            "align/lwbf3p.align\n",
            "align/lwbf4a.align\n",
            "align/lwbl5n.align\n",
            "align/lwbl6s.align\n",
            "align/lwbl7p.align\n",
            "align/lwbl8a.align\n",
            "align/lwbr9n.align\n",
            "align/lwbs1p.align\n",
            "align/lwbs2a.align\n",
            "align/lwbszs.align\n",
            "align/lwbz3n.align\n",
            "align/lwbz4s.align\n",
            "align/lwbz5p.align\n",
            "align/lwbz6a.align\n",
            "align/lwie3n.align\n",
            "align/lwie4s.align\n",
            "align/lwie5p.align\n",
            "align/lwie6a.align\n",
            "align/lwik7n.align\n",
            "align/lwik8s.align\n",
            "align/lwik9p.align\n",
            "align/lwilza.align\n",
            "align/lwir1n.align\n",
            "align/lwir2s.align\n",
            "align/lwir3p.align\n",
            "align/lwir4a.align\n",
            "align/lwiy5n.align\n",
            "align/lwiy6s.align\n",
            "align/lwiy7p.align\n",
            "align/lwiy8a.align\n",
            "align/lwwf5n.align\n",
            "align/lwwf6s.align\n",
            "align/lwwf7p.align\n",
            "align/lwwf8a.align\n",
            "align/lwwl9n.align\n",
            "align/lwwm1p.align\n",
            "align/lwwm2a.align\n",
            "align/lwwmzs.align\n",
            "align/lwws3n.align\n",
            "align/lwws4s.align\n",
            "align/lwws5p.align\n",
            "align/lwws6a.align\n",
            "align/lwwz7n.align\n",
            "align/lwwz8s.align\n",
            "align/lwwz9p.align\n",
            "align/pbab9n.align\n",
            "align/pbac1p.align\n",
            "align/pbac2a.align\n",
            "align/pbaczs.align\n",
            "align/pbai3n.align\n",
            "align/pbai4s.align\n",
            "align/pbai5p.align\n",
            "align/pbai6a.align\n",
            "align/pbao7n.align\n",
            "align/pbao8s.align\n",
            "align/pbao9p.align\n",
            "align/pbapza.align\n",
            "align/pbav1n.align\n",
            "align/pbav2s.align\n",
            "align/pbav3p.align\n",
            "align/pbav4a.align\n",
            "align/pbbc3n.align\n",
            "align/pbbc4s.align\n",
            "align/pbbc5p.align\n",
            "align/pbbc6a.align\n",
            "align/pbbi7n.align\n",
            "align/pbbi8s.align\n",
            "align/pbbi9p.align\n",
            "align/pbbjza.align\n",
            "align/pbbp1n.align\n",
            "align/pbbp2s.align\n",
            "align/pbbp3p.align\n",
            "align/pbbp4a.align\n",
            "align/pbbv5n.align\n",
            "align/pbbv6s.align\n",
            "align/pbbv7p.align\n",
            "align/pbbv8a.align\n",
            "align/pbib5n.align\n",
            "align/pbib6s.align\n",
            "align/pbib7p.align\n",
            "align/pbib8a.align\n",
            "align/pbih9n.align\n",
            "align/pbii1p.align\n",
            "align/pbii2a.align\n",
            "align/pbiizs.align\n",
            "align/pbio3n.align\n",
            "align/pbio4s.align\n",
            "align/pbio5p.align\n",
            "align/pbio6a.align\n",
            "align/pbiu7n.align\n",
            "align/pbiu8s.align\n",
            "align/pbiu9p.align\n",
            "align/pbivza.align\n",
            "align/pbwc7n.align\n",
            "align/pbwc8s.align\n",
            "align/pbwc9p.align\n",
            "align/pbwdza.align\n",
            "align/pbwj1n.align\n",
            "align/pbwj2s.align\n",
            "align/pbwj3p.align\n",
            "align/pbwj4a.align\n",
            "align/pbwp5n.align\n",
            "align/pbwp6s.align\n",
            "align/pbwp7p.align\n",
            "align/pbwp8a.align\n",
            "align/pbwv9n.align\n",
            "align/pbwx1p.align\n",
            "align/pbwx2a.align\n",
            "align/pbwxzs.align\n",
            "align/pgad7n.align\n",
            "align/pgad8s.align\n",
            "align/pgad9p.align\n",
            "align/pgaeza.align\n",
            "align/pgak1n.align\n",
            "align/pgak2s.align\n",
            "align/pgak3p.align\n",
            "align/pgak4a.align\n",
            "align/pgaq5n.align\n",
            "align/pgaq6s.align\n",
            "align/pgaq7p.align\n",
            "align/pgaq8a.align\n",
            "align/pgax9n.align\n",
            "align/pgay1p.align\n",
            "align/pgay2a.align\n",
            "align/pgayzs.align\n",
            "align/pgbe1n.align\n",
            "align/pgbe2s.align\n",
            "align/pgbe3p.align\n",
            "align/pgbe4a.align\n",
            "align/pgbk5n.align\n",
            "align/pgbk6s.align\n",
            "align/pgbk7p.align\n",
            "align/pgbk8a.align\n",
            "align/pgbq9n.align\n",
            "align/pgbr1p.align\n",
            "align/pgbr2a.align\n",
            "align/pgbrzs.align\n",
            "align/pgby3n.align\n",
            "align/pgby4s.align\n",
            "align/pgby5p.align\n",
            "align/pgby6a.align\n",
            "align/pgid3n.align\n",
            "align/pgid4s.align\n",
            "align/pgid5p.align\n",
            "align/pgid6a.align\n",
            "align/pgij7n.align\n",
            "align/pgij8s.align\n",
            "align/pgij9p.align\n",
            "align/pgikza.align\n",
            "align/pgiq1n.align\n",
            "align/pgiq2s.align\n",
            "align/pgiq3p.align\n",
            "align/pgiq4a.align\n",
            "align/pgix5n.align\n",
            "align/pgix6s.align\n",
            "align/pgix7p.align\n",
            "align/pgix8a.align\n",
            "align/pgwe5n.align\n",
            "align/pgwe6s.align\n",
            "align/pgwe7p.align\n",
            "align/pgwe8a.align\n",
            "align/pgwk9n.align\n",
            "align/pgwl1p.align\n",
            "align/pgwl2a.align\n",
            "align/pgwlzs.align\n",
            "align/pgwr3n.align\n",
            "align/pgwr4s.align\n",
            "align/pgwr5p.align\n",
            "align/pgwr6a.align\n",
            "align/pgwy7n.align\n",
            "align/pgwy8s.align\n",
            "align/pgwy9p.align\n",
            "align/pgwzza.align\n",
            "align/prac5n.align\n",
            "align/prac6s.align\n",
            "align/prac7p.align\n",
            "align/prac8a.align\n",
            "align/prai9n.align\n",
            "align/praj1p.align\n",
            "align/praj2a.align\n",
            "align/prajzs.align\n",
            "align/prap3n.align\n",
            "align/prap4s.align\n",
            "align/prap5p.align\n",
            "align/prap6a.align\n",
            "align/prav7n.align\n",
            "align/prav8s.align\n",
            "align/prav9p.align\n",
            "align/praxza.align\n",
            "align/prbc9n.align\n",
            "align/prbd1p.align\n",
            "align/prbd2a.align\n",
            "align/prbdzs.align\n",
            "align/prbj3n.align\n",
            "align/prbj4s.align\n",
            "align/prbj5p.align\n",
            "align/prbj6a.align\n",
            "align/prbp7n.align\n",
            "align/prbp8s.align\n",
            "align/prbp9p.align\n",
            "align/prbqza.align\n",
            "align/prbx1n.align\n",
            "align/prbx2s.align\n",
            "align/prbx3p.align\n",
            "align/prbx4a.align\n",
            "align/pric1n.align\n",
            "align/pric2s.align\n",
            "align/pric3p.align\n",
            "align/pric4a.align\n",
            "align/prii5n.align\n",
            "align/prii6s.align\n",
            "align/prii7p.align\n",
            "align/prii8a.align\n",
            "align/prio9n.align\n",
            "align/prip1p.align\n",
            "align/prip2a.align\n",
            "align/pripzs.align\n",
            "align/priv3n.align\n",
            "align/priv4s.align\n",
            "align/priv5p.align\n",
            "align/priv6a.align\n",
            "align/prwd3n.align\n",
            "align/prwd4s.align\n",
            "align/prwd5p.align\n",
            "align/prwd6a.align\n",
            "align/prwj7n.align\n",
            "align/prwj8s.align\n",
            "align/prwj9p.align\n",
            "align/prwkza.align\n",
            "align/prwq1n.align\n",
            "align/prwq2s.align\n",
            "align/prwq3p.align\n",
            "align/prwq4a.align\n",
            "align/prwx5n.align\n",
            "align/prwx6s.align\n",
            "align/prwx7p.align\n",
            "align/prwx8a.align\n",
            "align/pwad1n.align\n",
            "align/pwad2s.align\n",
            "align/pwad3p.align\n",
            "align/pwad4a.align\n",
            "align/pwaj5n.align\n",
            "align/pwaj6s.align\n",
            "align/pwaj7p.align\n",
            "align/pwaj8a.align\n",
            "align/pwap9n.align\n",
            "align/pwaq1p.align\n",
            "align/pwaq2a.align\n",
            "align/pwaqzs.align\n",
            "align/pwax3n.align\n",
            "align/pwax4s.align\n",
            "align/pwax5p.align\n",
            "align/pwax6a.align\n",
            "align/pwbd5n.align\n",
            "align/pwbd6s.align\n",
            "align/pwbd7p.align\n",
            "align/pwbd8a.align\n",
            "align/pwbj9n.align\n",
            "align/pwbk1p.align\n",
            "align/pwbk2a.align\n",
            "align/pwbkzs.align\n",
            "align/pwbq3n.align\n",
            "align/pwbq4s.align\n",
            "align/pwbq5p.align\n",
            "align/pwbq6a.align\n",
            "align/pwbx7n.align\n",
            "align/pwbx8s.align\n",
            "align/pwbx9p.align\n",
            "align/pwbyza.align\n",
            "align/pwic7n.align\n",
            "align/pwic8s.align\n",
            "align/pwic9p.align\n",
            "align/pwidza.align\n",
            "align/pwij1n.align\n",
            "align/pwij2s.align\n",
            "align/pwij3p.align\n",
            "align/pwij4a.align\n",
            "align/pwip5n.align\n",
            "align/pwip6s.align\n",
            "align/pwip7p.align\n",
            "align/pwip8a.align\n",
            "align/pwiv9n.align\n",
            "align/pwix1p.align\n",
            "align/pwix2a.align\n",
            "align/pwixzs.align\n",
            "align/pwwd9n.align\n",
            "align/pwwe1p.align\n",
            "align/pwwe2a.align\n",
            "align/pwwezs.align\n",
            "align/pwwk3n.align\n",
            "align/pwwk4s.align\n",
            "align/pwwk5p.align\n",
            "align/pwwk6a.align\n",
            "align/pwwq7n.align\n",
            "align/pwwq8s.align\n",
            "align/pwwq9p.align\n",
            "align/pwwrza.align\n",
            "align/pwwy1n.align\n",
            "align/pwwy2s.align\n",
            "align/pwwy3p.align\n",
            "align/pwwy4a.align\n",
            "align/sbaa3n.align\n",
            "align/sbaa4s.align\n",
            "align/sbaa5p.align\n",
            "align/sbaa6a.align\n",
            "align/sbag7n.align\n",
            "align/sbag8s.align\n",
            "align/sbag9p.align\n",
            "align/sbahza.align\n",
            "align/sban1n.align\n",
            "align/sban2s.align\n",
            "align/sban3p.align\n",
            "align/sban4a.align\n",
            "align/sbat5n.align\n",
            "align/sbat6s.align\n",
            "align/sbat7p.align\n",
            "align/sbat8a.align\n",
            "align/sbba7n.align\n",
            "align/sbba8s.align\n",
            "align/sbba9p.align\n",
            "align/sbbbza.align\n",
            "align/sbbh1n.align\n",
            "align/sbbh2s.align\n",
            "align/sbbh3p.align\n",
            "align/sbbh4a.align\n",
            "align/sbbn5n.align\n",
            "align/sbbn6s.align\n",
            "align/sbbn7p.align\n",
            "align/sbbn8a.align\n",
            "align/sbbt9n.align\n",
            "align/sbbu1p.align\n",
            "align/sbbu2a.align\n",
            "align/sbbuzs.align\n",
            "align/sbia1p.align\n",
            "align/sbia2a.align\n",
            "align/sbiazs.align\n",
            "align/sbig3n.align\n",
            "align/sbig4s.align\n",
            "align/sbig5p.align\n",
            "align/sbig6a.align\n",
            "align/sbim7n.align\n",
            "align/sbim8s.align\n",
            "align/sbim9p.align\n",
            "align/sbinza.align\n",
            "align/sbit1n.align\n",
            "align/sbit2s.align\n",
            "align/sbit3p.align\n",
            "align/sbit4a.align\n",
            "align/sbwb1n.align\n",
            "align/sbwb2s.align\n",
            "align/sbwb3p.align\n",
            "align/sbwb4a.align\n",
            "align/sbwh5n.align\n",
            "align/sbwh6s.align\n",
            "align/sbwh7p.align\n",
            "align/sbwh8a.align\n",
            "align/sbwn9n.align\n",
            "align/sbwo1p.align\n",
            "align/sbwo2a.align\n",
            "align/sbwozs.align\n",
            "align/sbwu3n.align\n",
            "align/sbwu4s.align\n",
            "align/sbwu5p.align\n",
            "align/sbwu6a.align\n",
            "align/sgac1n.align\n",
            "align/sgac2s.align\n",
            "align/sgac3p.align\n",
            "align/sgac4a.align\n",
            "align/sgai5n.align\n",
            "align/sgai6s.align\n",
            "align/sgai7p.align\n",
            "align/sgai8a.align\n",
            "align/sgao9n.align\n",
            "align/sgap1p.align\n",
            "align/sgap2a.align\n",
            "align/sgapzs.align\n",
            "align/sgav3n.align\n",
            "align/sgav4s.align\n",
            "align/sgav5p.align\n",
            "align/sgav6a.align\n",
            "align/sgbc5n.align\n",
            "align/sgbc6s.align\n",
            "align/sgbc7p.align\n",
            "align/sgbc8a.align\n",
            "align/sgbi9n.align\n",
            "align/sgbj1p.align\n",
            "align/sgbj2a.align\n",
            "align/sgbjzs.align\n",
            "align/sgbp3n.align\n",
            "align/sgbp4s.align\n",
            "align/sgbp5p.align\n",
            "align/sgbp6a.align\n",
            "align/sgbv7n.align\n",
            "align/sgbv8s.align\n",
            "align/sgbv9p.align\n",
            "align/sgbxza.align\n",
            "align/sgib7n.align\n",
            "align/sgib8s.align\n",
            "align/sgib9p.align\n",
            "align/sgicza.align\n",
            "align/sgii1n.align\n",
            "align/sgii2s.align\n",
            "align/sgii3p.align\n",
            "align/sgii4a.align\n",
            "align/sgio5n.align\n",
            "align/sgio6s.align\n",
            "align/sgio7p.align\n",
            "align/sgio8a.align\n",
            "align/sgiu9n.align\n",
            "align/sgiv1p.align\n",
            "align/sgiv2a.align\n",
            "align/sgivzs.align\n",
            "align/sgwc9n.align\n",
            "align/sgwd1p.align\n",
            "align/sgwd2a.align\n",
            "align/sgwdzs.align\n",
            "align/sgwj3n.align\n",
            "align/sgwj4s.align\n",
            "align/sgwj5p.align\n",
            "align/sgwj6a.align\n",
            "align/sgwp7n.align\n",
            "align/sgwp8s.align\n",
            "align/sgwp9p.align\n",
            "align/sgwqza.align\n",
            "align/sgwx1n.align\n",
            "align/sgwx2s.align\n",
            "align/sgwx3p.align\n",
            "align/sgwx4a.align\n",
            "align/sraa9n.align\n",
            "align/srab1p.align\n",
            "align/srab2a.align\n",
            "align/srabzs.align\n",
            "align/srah3n.align\n",
            "align/srah4s.align\n",
            "align/srah5p.align\n",
            "align/srah6a.align\n",
            "align/sran7n.align\n",
            "align/sran8s.align\n",
            "align/sran9p.align\n",
            "align/sraoza.align\n",
            "align/srau1n.align\n",
            "align/srau2s.align\n",
            "align/srau3p.align\n",
            "align/srau4a.align\n",
            "align/srbb3n.align\n",
            "align/srbb4s.align\n",
            "align/srbb5p.align\n",
            "align/srbb6a.align\n",
            "align/srbh7n.align\n",
            "align/srbh8s.align\n",
            "align/srbh9p.align\n",
            "align/srbiza.align\n",
            "align/srbo1n.align\n",
            "align/srbo2s.align\n",
            "align/srbo3p.align\n",
            "align/srbo4a.align\n",
            "align/srbu5n.align\n",
            "align/srbu6s.align\n",
            "align/srbu7p.align\n",
            "align/srbu8a.align\n",
            "align/sria5n.align\n",
            "align/sria6s.align\n",
            "align/sria7p.align\n",
            "align/sria8a.align\n",
            "align/srig9n.align\n",
            "align/srih1p.align\n",
            "align/srih2a.align\n",
            "align/srihzs.align\n",
            "align/srin3n.align\n",
            "align/srin4s.align\n",
            "align/srin5p.align\n",
            "align/srin6a.align\n",
            "align/srit7n.align\n",
            "align/srit8s.align\n",
            "align/srit9p.align\n",
            "align/sriuza.align\n",
            "align/srwb7n.align\n",
            "align/srwb8s.align\n",
            "align/srwb9p.align\n",
            "align/srwcza.align\n",
            "align/srwi1n.align\n",
            "align/srwi2s.align\n",
            "align/srwi3p.align\n",
            "align/srwi4a.align\n",
            "align/srwo5n.align\n",
            "align/srwo6s.align\n",
            "align/srwo7p.align\n",
            "align/srwo8a.align\n",
            "align/srwu9n.align\n",
            "align/srwv1p.align\n",
            "align/srwv2a.align\n",
            "align/srwvzs.align\n",
            "align/swab5n.align\n",
            "align/swab6s.align\n",
            "align/swab7p.align\n",
            "align/swab8a.align\n",
            "align/swah9n.align\n",
            "align/swai1p.align\n",
            "align/swai2a.align\n",
            "align/swaizs.align\n",
            "align/swao3n.align\n",
            "align/swao4s.align\n",
            "align/swao5p.align\n",
            "align/swao6a.align\n",
            "align/swau7n.align\n",
            "align/swau8s.align\n",
            "align/swau9p.align\n",
            "align/swavza.align\n",
            "align/swbb9n.align\n",
            "align/swbc1p.align\n",
            "align/swbc2a.align\n",
            "align/swbczs.align\n",
            "align/swbi3n.align\n",
            "align/swbi4s.align\n",
            "align/swbi5p.align\n",
            "align/swbi6a.align\n",
            "align/swbo7n.align\n",
            "align/swbo8s.align\n",
            "align/swbo9p.align\n",
            "align/swbpza.align\n",
            "align/swbv1n.align\n",
            "align/swbv2s.align\n",
            "align/swbv3p.align\n",
            "align/swbv4a.align\n",
            "align/swib1n.align\n",
            "align/swib2s.align\n",
            "align/swib3p.align\n",
            "align/swib4a.align\n",
            "align/swih5n.align\n",
            "align/swih6s.align\n",
            "align/swih7p.align\n",
            "align/swih8a.align\n",
            "align/swin9n.align\n",
            "align/swio1p.align\n",
            "align/swio2a.align\n",
            "align/swiozs.align\n",
            "align/swiu3n.align\n",
            "align/swiu4s.align\n",
            "align/swiu5p.align\n",
            "align/swiu6a.align\n",
            "align/swwc3n.align\n",
            "align/swwc4s.align\n",
            "align/swwc5p.align\n",
            "align/swwc6a.align\n",
            "align/swwi7n.align\n",
            "align/swwi8s.align\n",
            "align/swwi9p.align\n",
            "align/swwjza.align\n",
            "align/swwp1n.align\n",
            "align/swwp2s.align\n",
            "align/swwp3p.align\n",
            "align/swwp4a.align\n",
            "align/swwv5n.align\n",
            "align/swwv6s.align\n",
            "align/swwv7p.align\n",
            "align/swwv8a.align\n"
          ]
        }
      ],
      "source": [
        "!tar -xvf s1.tar\n",
        "!tar -xvf s2.tar"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NEJ_VZhiR5Ov",
        "outputId": "c04ab84d-6458-427c-c31c-97b17556f819"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Requirement already satisfied: opencv-python-headless in /usr/local/lib/python3.11/dist-packages (4.11.0.86)\n",
            "Requirement already satisfied: dlib in /usr/local/lib/python3.11/dist-packages (19.24.6)\n",
            "Requirement already satisfied: imutils in /usr/local/lib/python3.11/dist-packages (0.5.4)\n",
            "Requirement already satisfied: numpy>=1.21.2 in /usr/local/lib/python3.11/dist-packages (from opencv-python-headless) (2.0.2)\n"
          ]
        }
      ],
      "source": [
        "!pip install opencv-python-headless dlib imutils"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "VeBf4QbWSK57"
      },
      "outputs": [],
      "source": [
        "import cv2\n",
        "import os\n",
        "import numpy as np\n",
        "import glob\n",
        "from tqdm import tqdm"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "kSxNi6_vSNlR"
      },
      "outputs": [],
      "source": [
        "def extract_mouth_frames(video_path, max_frames=75):\n",
        "    cap = cv2.VideoCapture(video_path)\n",
        "    frames = []\n",
        "    while True:\n",
        "        ret, frame = cap.read()\n",
        "        if not ret or len(frames) >= max_frames:\n",
        "            break\n",
        "        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)\n",
        "        mouth = cv2.resize(gray[150:250, 100:220], (120, 60))  # approx mouth crop\n",
        "        frames.append(mouth)\n",
        "    cap.release()\n",
        "    return np.array(frames)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "BqKJ0AEzSRu1"
      },
      "outputs": [],
      "source": [
        "video_paths = glob.glob(\"/content/drive/MyDrive/lip_reading/s1/video/*.mpg\") + \\\n",
        "              glob.glob(\"/content/drive/MyDrive/lip_reading/s2/video/*.mpg\")\n",
        "\n",
        "label_paths = glob.glob(\"/content/drive/MyDrive/lip_reading/s1/align/*.txt\") + \\\n",
        "              glob.glob(\"/content/drive/MyDrive/lip_reading/s2/align/*.txt\")\n",
        "\n",
        "video_paths.sort()\n",
        "label_paths.sort()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xHI1O1-0SU31",
        "outputId": "dd3c6b92-e93f-44d6-ff1d-71ed779883c5"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "0it [00:00, ?it/s]\n"
          ]
        }
      ],
      "source": [
        "X_data = []\n",
        "y_data = []\n",
        "\n",
        "for i in tqdm(range(len(video_paths))):\n",
        "    frames = extract_mouth_frames(video_paths[i])\n",
        "    if frames.shape[0] < 30:  # Skip too short clips\n",
        "        continue\n",
        "    X_data.append(frames)\n",
        "\n",
        "    with open(label_paths[i], 'r') as f:\n",
        "        words = [line.split()[-1] for line in f.readlines()]\n",
        "        y_data.append(\" \".join(words))\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rc6XMDSzSXI3",
        "outputId": "d7803cd0-0449-4320-da90-8f5d6f2b407b"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "✅ Data Loaded: (0,) 0\n"
          ]
        }
      ],
      "source": [
        "\n",
        "X_data = np.array(X_data)\n",
        "y_data = np.array(y_data)\n",
        "print(\"✅ Data Loaded:\", X_data.shape, len(y_data))\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GrKbh-dfSY6w",
        "outputId": "83a6d37a-fedc-43dd-9890-7ee3aabeb811"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "/bin/bash: -c: line 2: syntax error: unexpected end of file\n"
          ]
        }
      ],
      "source": [
        "!pip install tensorflow|"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "TTOTA_AfShqF"
      },
      "outputs": [],
      "source": [
        "import tensorflow as tf\n",
        "from tensorflow.keras.models import Model\n",
        "from tensorflow.keras.layers import Input, TimeDistributed, Conv2D, MaxPooling2D, Flatten, LSTM, Dense, Dropout\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "dL4n8zPnSjoC"
      },
      "outputs": [],
      "source": [
        "def build_lip_reading_model(input_shape, output_dim):\n",
        "    inputs = Input(shape=input_shape)\n",
        "\n",
        "    x = TimeDistributed(Conv2D(32, (3, 3), activation='relu'))(inputs)\n",
        "    x = TimeDistributed(MaxPooling2D((2, 2)))(x)\n",
        "    x = TimeDistributed(Conv2D(64, (3, 3), activation='relu'))(x)\n",
        "    x = TimeDistributed(MaxPooling2D((2, 2)))(x)\n",
        "    x = TimeDistributed(Flatten())(x)\n",
        "\n",
        "    x = LSTM(128, return_sequences=False)(x)\n",
        "    x = Dropout(0.5)(x)\n",
        "    x = Dense(256, activation='relu')(x)\n",
        "    outputs = Dense(output_dim, activation='softmax')(x)\n",
        "\n",
        "    model = Model(inputs, outputs)\n",
        "    return model\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Ete9jffISnhn",
        "outputId": "071e5151-1631-4285-ba15-6034b75bc043"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            " Extracted: /content/drive/MyDrive/lip_reading/s1.tar to /content/drive/MyDrive/lip_reading/s1\n",
            " Extracted: /content/drive/MyDrive/lip_reading/s2.tar to /content/drive/MyDrive/lip_reading/s2\n"
          ]
        }
      ],
      "source": [
        "import tarfile\n",
        "import os\n",
        "\n",
        "def extract_tar(tar_path, extract_path):\n",
        "    if not os.path.exists(extract_path):\n",
        "        os.makedirs(extract_path)\n",
        "    with tarfile.open(tar_path) as tar:\n",
        "        tar.extractall(path=extract_path)\n",
        "        print(f\" Extracted: {tar_path} to {extract_path}\")\n",
        "\n",
        "# Paths to tar files\n",
        "s1_tar = \"/content/drive/MyDrive/lip_reading/s1.tar\"\n",
        "s2_tar = \"/content/drive/MyDrive/lip_reading/s2.tar\"\n",
        "\n",
        "# Paths to extract\n",
        "s1_path = \"/content/drive/MyDrive/lip_reading/s1\"\n",
        "s2_path = \"/content/drive/MyDrive/lip_reading/s2\"\n",
        "\n",
        "# Extract both\n",
        "extract_tar(s1_tar, s1_path)\n",
        "extract_tar(s2_tar, s2_path)\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "u04AJqeOS0mi",
        "outputId": "810bf03a-9ea2-45d9-e664-36722ece0230"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "s1 videos: ['id23_vcd_priazn.mpg', 'id2_vcd_swwp2s.mpg']\n",
            "s2 videos: ['id23_vcd_priazn.mpg', 'id2_vcd_swwp2s.mpg']\n"
          ]
        }
      ],
      "source": [
        "import os\n",
        "print(\"s1 videos:\", [f for f in os.listdir(s1_path) if f.endswith(\".mpg\")])\n",
        "print(\"s2 videos:\", [f for f in os.listdir(s2_path) if f.endswith(\".mpg\")])\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "DeWb0Kb6S3oY"
      },
      "outputs": [],
      "source": [
        "s1_path = \"/content/drive/MyDrive/lip_reading/s1\"\n",
        "s2_path = \"/content/drive/MyDrive/lip_reading/s2\"\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "F1FCfplFTBf8",
        "outputId": "82da5c6c-c151-476c-ac59-e5873f5e1d84"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Loading videos from s1...\n",
            "Loading videos from s2...\n",
            " Total videos loaded: 4\n",
            " Total labels loaded: 4\n"
          ]
        }
      ],
      "source": [
        "import os\n",
        "\n",
        "import cv2\n",
        "import numpy as np\n",
        "\n",
        "def extract_frames_from_video(video_path, max_frames=30):\n",
        "    cap = cv2.VideoCapture(video_path)\n",
        "    frames = []\n",
        "    while len(frames) < max_frames:\n",
        "        ret, frame = cap.read()\n",
        "        if not ret:\n",
        "            break\n",
        "        frame = cv2.resize(frame, (100, 50))\n",
        "        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)\n",
        "        frames.append(gray)\n",
        "    cap.release()\n",
        "    return np.array(frames)\n",
        "\n",
        "video_data = []\n",
        "labels = []\n",
        "\n",
        "# Define paths\n",
        "s1_path = '/content/drive/MyDrive/lip_reading/s1'\n",
        "s2_path = '/content/drive/MyDrive/lip_reading/s2'\n",
        "\n",
        "# Load from s1\n",
        "print(\"Loading videos from s1...\")\n",
        "for file in os.listdir(s1_path):\n",
        "    if file.endswith(\".mpg\"):\n",
        "        video_path = os.path.join(s1_path, file)\n",
        "        frames = extract_frames_from_video(video_path)\n",
        "        if frames.shape[0] > 0:\n",
        "            video_data.append(frames)\n",
        "            labels.append(\"s1\")\n",
        "\n",
        "# Load from s2\n",
        "print(\"Loading videos from s2...\")\n",
        "for file in os.listdir(s2_path):\n",
        "    if file.endswith(\".mpg\"):\n",
        "        video_path = os.path.join(s2_path, file)\n",
        "        frames = extract_frames_from_video(video_path)\n",
        "        if frames.shape[0] > 0:\n",
        "            video_data.append(frames)\n",
        "            labels.append(\"s2\")\n",
        "\n",
        "print(\" Total videos loaded:\", len(video_data))\n",
        "print(\" Total labels loaded:\", len(labels))\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yA6ftfaUkaSr",
        "outputId": "7de20163-a6dd-44ad-cda7-1bf391e81946"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            " Preprocessing complete!\n",
            " Training samples: 3\n",
            " Testing samples: 1\n",
            " Input shape: (30, 50, 100, 1)\n"
          ]
        }
      ],
      "source": [
        "from sklearn.preprocessing import LabelEncoder\n",
        "from tensorflow.keras.utils import to_categorical\n",
        "from sklearn.model_selection import train_test_split\n",
        "import numpy as np\n",
        "\n",
        "# Rename video_data and labels to expected variable names\n",
        "X_data = video_data\n",
        "y_data = labels\n",
        "\n",
        "# Check if data is valid\n",
        "if not X_data or not y_data:\n",
        "    print(\"Error: X_data or y_data is empty. Please check video loading.\")\n",
        "else:\n",
        "    # Padding video sequences to same length\n",
        "    max_len = max([x.shape[0] for x in X_data])\n",
        "    X = np.array([\n",
        "        np.pad(x, ((0, max_len - x.shape[0]), (0, 0), (0, 0)), mode='constant')\n",
        "        for x in X_data\n",
        "    ])\n",
        "\n",
        "    # Add channel dimension for CNN input\n",
        "    X = X[..., np.newaxis]  # Final shape: (samples, frames, height, width, 1)\n",
        "\n",
        "    # Encode labels\n",
        "    label_encoder = LabelEncoder()\n",
        "    y_encoded = label_encoder.fit_transform(y_data)\n",
        "    y = to_categorical(y_encoded)\n",
        "\n",
        "    # Train-test split\n",
        "    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n",
        "\n",
        "    print(\" Preprocessing complete!\")\n",
        "    print(\" Training samples:\", X_train.shape[0])\n",
        "    print(\" Testing samples:\", X_test.shape[0])\n",
        "    print(\" Input shape:\", X_train.shape[1:])\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "-YgAbOonkjN0"
      },
      "outputs": [],
      "source": [
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Conv2D, MaxPooling2D, TimeDistributed, Flatten, LSTM, Dense, Dropout\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bPi086FLk5OT",
        "outputId": "88e57796-c998-4b01-9fdc-0fbcede7c04a"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/wrapper.py:27: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(**kwargs)\n"
          ]
        }
      ],
      "source": [
        "model = Sequential()\n",
        "\n",
        "# Apply CNN on each frame (TimeDistributed)\n",
        "model.add(TimeDistributed(Conv2D(32, (3, 3), activation='relu'), input_shape=(X.shape[1], X.shape[2], X.shape[3], 1)))\n",
        "model.add(TimeDistributed(MaxPooling2D((2, 2))))\n",
        "model.add(TimeDistributed(Flatten()))\n",
        "\n",
        "# LSTM over time (frame-wise)\n",
        "model.add(LSTM(64, return_sequences=False))\n",
        "model.add(Dropout(0.5))\n",
        "model.add(Dense(64, activation='relu'))\n",
        "model.add(Dense(y.shape[1], activation='softmax'))\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 368
        },
        "id": "d449TRnCk7Y7",
        "outputId": "51a3474e-fa50-4c96-f129-c4ed2f3b3b6c"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential_1\"</span>\n",
              "</pre>\n"
            ],
            "text/plain": [
              "\u001b[1mModel: \"sequential_1\"\u001b[0m\n"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n",
              "┃<span style=\"font-weight: bold\"> Layer (type)                         </span>┃<span style=\"font-weight: bold\"> Output Shape                </span>┃<span style=\"font-weight: bold\">         Param # </span>┃\n",
              "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n",
              "│ time_distributed (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TimeDistributed</span>)   │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">30</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">48</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">98</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">320</span> │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ time_distributed_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TimeDistributed</span>) │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">30</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">24</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">49</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)      │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ time_distributed_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TimeDistributed</span>) │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">30</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">37632</span>)           │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ lstm (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">LSTM</span>)                          │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)                  │       <span style=\"color: #00af00; text-decoration-color: #00af00\">9,650,432</span> │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ dropout (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)                    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)                  │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ dense_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)                  │           <span style=\"color: #00af00; text-decoration-color: #00af00\">4,160</span> │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ dense_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)                   │             <span style=\"color: #00af00; text-decoration-color: #00af00\">130</span> │\n",
              "└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n",
              "</pre>\n"
            ],
            "text/plain": [
              "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n",
              "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                        \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape               \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m        Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
              "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n",
              "│ time_distributed (\u001b[38;5;33mTimeDistributed\u001b[0m)   │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m30\u001b[0m, \u001b[38;5;34m48\u001b[0m, \u001b[38;5;34m98\u001b[0m, \u001b[38;5;34m32\u001b[0m)      │             \u001b[38;5;34m320\u001b[0m │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ time_distributed_1 (\u001b[38;5;33mTimeDistributed\u001b[0m) │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m30\u001b[0m, \u001b[38;5;34m24\u001b[0m, \u001b[38;5;34m49\u001b[0m, \u001b[38;5;34m32\u001b[0m)      │               \u001b[38;5;34m0\u001b[0m │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ time_distributed_2 (\u001b[38;5;33mTimeDistributed\u001b[0m) │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m30\u001b[0m, \u001b[38;5;34m37632\u001b[0m)           │               \u001b[38;5;34m0\u001b[0m │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ lstm (\u001b[38;5;33mLSTM\u001b[0m)                          │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m)                  │       \u001b[38;5;34m9,650,432\u001b[0m │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ dropout (\u001b[38;5;33mDropout\u001b[0m)                    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m)                  │               \u001b[38;5;34m0\u001b[0m │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ dense_2 (\u001b[38;5;33mDense\u001b[0m)                      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m)                  │           \u001b[38;5;34m4,160\u001b[0m │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ dense_3 (\u001b[38;5;33mDense\u001b[0m)                      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m2\u001b[0m)                   │             \u001b[38;5;34m130\u001b[0m │\n",
              "└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">9,655,042</span> (36.83 MB)\n",
              "</pre>\n"
            ],
            "text/plain": [
              "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m9,655,042\u001b[0m (36.83 MB)\n"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">9,655,042</span> (36.83 MB)\n",
              "</pre>\n"
            ],
            "text/plain": [
              "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m9,655,042\u001b[0m (36.83 MB)\n"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n",
              "</pre>\n"
            ],
            "text/plain": [
              "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n",
        "model.summary()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8YOFctNgk9QY",
        "outputId": "ac42ac5e-e00b-46a1-a874-ec80349aaec1"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 1/10\n",
            "\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m18s\u001b[0m 4s/step - accuracy: 0.6111 - loss: 0.6796 - val_accuracy: 0.0000e+00 - val_loss: 1.7405\n",
            "Epoch 2/10\n",
            "\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 2s/step - accuracy: 0.6111 - loss: 0.6354 - val_accuracy: 0.0000e+00 - val_loss: 1.7895\n",
            "Epoch 3/10\n",
            "\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 2s/step - accuracy: 0.6111 - loss: 1.1092 - val_accuracy: 0.0000e+00 - val_loss: 1.8161\n",
            "Epoch 4/10\n",
            "\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 2s/step - accuracy: 0.6111 - loss: 0.6555 - val_accuracy: 0.0000e+00 - val_loss: 1.8145\n",
            "Epoch 5/10\n",
            "\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 2s/step - accuracy: 0.6111 - loss: 0.7214 - val_accuracy: 0.0000e+00 - val_loss: 1.9150\n",
            "Epoch 6/10\n",
            "\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 2s/step - accuracy: 0.6111 - loss: 1.3314 - val_accuracy: 0.0000e+00 - val_loss: 1.7119\n",
            "Epoch 7/10\n",
            "\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 2s/step - accuracy: 0.7778 - loss: 0.5914 - val_accuracy: 0.0000e+00 - val_loss: 1.4884\n",
            "Epoch 8/10\n",
            "\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 2s/step - accuracy: 0.6111 - loss: 0.7594 - val_accuracy: 0.0000e+00 - val_loss: 1.4967\n",
            "Epoch 9/10\n",
            "\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 2s/step - accuracy: 0.6111 - loss: 0.8100 - val_accuracy: 0.0000e+00 - val_loss: 1.5019\n",
            "Epoch 10/10\n",
            "\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 2s/step - accuracy: 0.6111 - loss: 0.6976 - val_accuracy: 0.0000e+00 - val_loss: 1.5080\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "<keras.src.callbacks.history.History at 0x7b1295f49ad0>"
            ]
          },
          "execution_count": 37,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "model.fit(X_train, y_train, epochs=10, batch_size=2, validation_data=(X_test, y_test))\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 753
        },
        "id": "XVfJYWHRk_DS",
        "outputId": "419dc652-e3d3-4bec-f919-efe06d0fd552"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential_2\"</span>\n",
              "</pre>\n"
            ],
            "text/plain": [
              "\u001b[1mModel: \"sequential_2\"\u001b[0m\n"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n",
              "┃<span style=\"font-weight: bold\"> Layer (type)                         </span>┃<span style=\"font-weight: bold\"> Output Shape                </span>┃<span style=\"font-weight: bold\">         Param # </span>┃\n",
              "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n",
              "│ time_distributed_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TimeDistributed</span>) │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">30</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">48</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">98</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">320</span> │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ time_distributed_4 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TimeDistributed</span>) │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">30</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">24</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">49</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)      │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ time_distributed_5 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TimeDistributed</span>) │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">30</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">37632</span>)           │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ lstm_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">LSTM</span>)                        │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)                  │       <span style=\"color: #00af00; text-decoration-color: #00af00\">9,650,432</span> │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ dropout_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)                  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)                  │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ dense_4 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)                  │           <span style=\"color: #00af00; text-decoration-color: #00af00\">4,160</span> │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ dense_5 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)                   │             <span style=\"color: #00af00; text-decoration-color: #00af00\">130</span> │\n",
              "└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n",
              "</pre>\n"
            ],
            "text/plain": [
              "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n",
              "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                        \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape               \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m        Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
              "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n",
              "│ time_distributed_3 (\u001b[38;5;33mTimeDistributed\u001b[0m) │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m30\u001b[0m, \u001b[38;5;34m48\u001b[0m, \u001b[38;5;34m98\u001b[0m, \u001b[38;5;34m32\u001b[0m)      │             \u001b[38;5;34m320\u001b[0m │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ time_distributed_4 (\u001b[38;5;33mTimeDistributed\u001b[0m) │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m30\u001b[0m, \u001b[38;5;34m24\u001b[0m, \u001b[38;5;34m49\u001b[0m, \u001b[38;5;34m32\u001b[0m)      │               \u001b[38;5;34m0\u001b[0m │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ time_distributed_5 (\u001b[38;5;33mTimeDistributed\u001b[0m) │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m30\u001b[0m, \u001b[38;5;34m37632\u001b[0m)           │               \u001b[38;5;34m0\u001b[0m │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ lstm_1 (\u001b[38;5;33mLSTM\u001b[0m)                        │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m)                  │       \u001b[38;5;34m9,650,432\u001b[0m │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ dropout_1 (\u001b[38;5;33mDropout\u001b[0m)                  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m)                  │               \u001b[38;5;34m0\u001b[0m │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ dense_4 (\u001b[38;5;33mDense\u001b[0m)                      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m)                  │           \u001b[38;5;34m4,160\u001b[0m │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ dense_5 (\u001b[38;5;33mDense\u001b[0m)                      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m2\u001b[0m)                   │             \u001b[38;5;34m130\u001b[0m │\n",
              "└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">9,655,042</span> (36.83 MB)\n",
              "</pre>\n"
            ],
            "text/plain": [
              "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m9,655,042\u001b[0m (36.83 MB)\n"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">9,655,042</span> (36.83 MB)\n",
              "</pre>\n"
            ],
            "text/plain": [
              "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m9,655,042\u001b[0m (36.83 MB)\n"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n",
              "</pre>\n"
            ],
            "text/plain": [
              "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 1/10\n",
            "\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m14s\u001b[0m 3s/step - accuracy: 0.2222 - loss: 0.9894 - val_accuracy: 1.0000 - val_loss: 0.6244\n",
            "Epoch 2/10\n",
            "\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 2s/step - accuracy: 0.0000e+00 - loss: 1.3224 - val_accuracy: 0.0000e+00 - val_loss: 0.6935\n",
            "Epoch 3/10\n",
            "\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 1s/step - accuracy: 0.7778 - loss: 0.6917 - val_accuracy: 0.0000e+00 - val_loss: 0.8794\n",
            "Epoch 4/10\n",
            "\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m15s\u001b[0m 4s/step - accuracy: 1.0000 - loss: 0.3592 - val_accuracy: 0.0000e+00 - val_loss: 0.8367\n",
            "Epoch 5/10\n",
            "\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 2s/step - accuracy: 0.6111 - loss: 0.7921 - val_accuracy: 0.0000e+00 - val_loss: 0.8462\n",
            "Epoch 6/10\n",
            "\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 1s/step - accuracy: 0.3889 - loss: 0.8734 - val_accuracy: 0.0000e+00 - val_loss: 0.8451\n",
            "Epoch 7/10\n",
            "\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 1s/step - accuracy: 1.0000 - loss: 0.4768 - val_accuracy: 0.0000e+00 - val_loss: 0.8969\n",
            "Epoch 8/10\n",
            "\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 2s/step - accuracy: 0.6111 - loss: 0.7137 - val_accuracy: 0.0000e+00 - val_loss: 0.9734\n",
            "Epoch 9/10\n",
            "\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 1s/step - accuracy: 0.6111 - loss: 0.9211 - val_accuracy: 0.0000e+00 - val_loss: 1.0716\n",
            "Epoch 10/10\n",
            "\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 2s/step - accuracy: 0.3889 - loss: 1.3297 - val_accuracy: 0.0000e+00 - val_loss: 1.1602\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "<keras.src.callbacks.history.History at 0x7b12a92be7d0>"
            ]
          },
          "execution_count": 38,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Conv2D, MaxPooling2D, TimeDistributed, Flatten, LSTM, Dense, Dropout\n",
        "\n",
        "# Step 1: Define the model\n",
        "model = Sequential()\n",
        "\n",
        "model.add(TimeDistributed(Conv2D(32, (3, 3), activation='relu'), input_shape=(X.shape[1], X.shape[2], X.shape[3], 1)))\n",
        "model.add(TimeDistributed(MaxPooling2D((2, 2))))\n",
        "model.add(TimeDistributed(Flatten()))\n",
        "model.add(LSTM(64, return_sequences=False))\n",
        "model.add(Dropout(0.5))\n",
        "model.add(Dense(64, activation='relu'))\n",
        "model.add(Dense(y.shape[1], activation='softmax'))\n",
        "\n",
        "# Step 2: Compile\n",
        "model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n",
        "\n",
        "# Step 3: Summary\n",
        "model.summary()\n",
        "\n",
        "# Step 4: Train\n",
        "model.fit(X_train, y_train, epochs=10, batch_size=2, validation_data=(X_test, y_test))\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ctrdaagElXV8",
        "outputId": "4e1d8941-1c9d-4bf1-b394-d02957161c6f"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 1s/step\n",
            " Actual label: s1\n",
            " Predicted label: s2\n"
          ]
        }
      ],
      "source": [
        "import random\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Pick a random index from test set\n",
        "idx = random.randint(0, len(X_test) - 1)\n",
        "\n",
        "# Predict\n",
        "pred = model.predict(np.expand_dims(X_test[idx], axis=0))\n",
        "predicted_label = label_encoder.inverse_transform([np.argmax(pred)])\n",
        "actual_label = label_encoder.inverse_transform([np.argmax(y_test[idx])])\n",
        "\n",
        "# Show result\n",
        "print(f\" Actual label: {actual_label[0]}\")\n",
        "print(f\" Predicted label: {predicted_label[0]}\")\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tv4bLlaPluMY",
        "outputId": "99c01edd-2157-4b01-dd83-68dd6039bbd1"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 1/20\n",
            "\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 1s/step - accuracy: 0.3333 - loss: 2.1598 - val_accuracy: 1.0000 - val_loss: 0.3624\n",
            "Epoch 2/20\n",
            "\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 1s/step - accuracy: 0.6667 - loss: 0.4727 - val_accuracy: 1.0000 - val_loss: 0.3524\n",
            "Epoch 3/20\n",
            "\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 1s/step - accuracy: 0.3333 - loss: 0.6643 - val_accuracy: 1.0000 - val_loss: 0.3660\n",
            "Epoch 4/20\n",
            "\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 1s/step - accuracy: 0.6667 - loss: 0.7255 - val_accuracy: 1.0000 - val_loss: 0.3785\n",
            "Epoch 5/20\n",
            "\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2s/step - accuracy: 0.3333 - loss: 1.3580 - val_accuracy: 1.0000 - val_loss: 0.4022\n",
            "Epoch 6/20\n",
            "\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2s/step - accuracy: 0.6667 - loss: 0.6360 - val_accuracy: 1.0000 - val_loss: 0.4104\n",
            "Epoch 7/20\n",
            "\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 1s/step - accuracy: 0.3333 - loss: 0.6213 - val_accuracy: 1.0000 - val_loss: 0.4245\n",
            "Epoch 8/20\n",
            "\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 1s/step - accuracy: 0.3333 - loss: 0.6397 - val_accuracy: 1.0000 - val_loss: 0.4389\n",
            "Epoch 9/20\n",
            "\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2s/step - accuracy: 0.6667 - loss: 0.4000 - val_accuracy: 1.0000 - val_loss: 0.4512\n",
            "Epoch 10/20\n",
            "\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 2s/step - accuracy: 1.0000 - loss: 0.4403 - val_accuracy: 1.0000 - val_loss: 0.4777\n",
            "Epoch 11/20\n",
            "\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 1s/step - accuracy: 0.3333 - loss: 0.8651 - val_accuracy: 1.0000 - val_loss: 0.5175\n",
            "Epoch 12/20\n",
            "\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 1s/step - accuracy: 0.3333 - loss: 0.6584 - val_accuracy: 1.0000 - val_loss: 0.5577\n",
            "Epoch 13/20\n",
            "\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 1s/step - accuracy: 0.0000e+00 - loss: 0.9065 - val_accuracy: 1.0000 - val_loss: 0.5959\n",
            "Epoch 14/20\n",
            "\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2s/step - accuracy: 0.0000e+00 - loss: 0.7535 - val_accuracy: 1.0000 - val_loss: 0.6230\n",
            "Epoch 15/20\n",
            "\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2s/step - accuracy: 0.6667 - loss: 0.6953 - val_accuracy: 1.0000 - val_loss: 0.6519\n",
            "Epoch 16/20\n",
            "\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 1s/step - accuracy: 1.0000 - loss: 0.4728 - val_accuracy: 1.0000 - val_loss: 0.6832\n",
            "Epoch 17/20\n",
            "\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 1s/step - accuracy: 1.0000 - loss: 0.4545 - val_accuracy: 0.0000e+00 - val_loss: 0.6939\n",
            "Epoch 18/20\n",
            "\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 1s/step - accuracy: 0.6667 - loss: 1.0559 - val_accuracy: 0.0000e+00 - val_loss: 0.7066\n",
            "Epoch 19/20\n",
            "\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2s/step - accuracy: 0.3333 - loss: 1.3659 - val_accuracy: 0.0000e+00 - val_loss: 0.7222\n",
            "Epoch 20/20\n",
            "\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 1s/step - accuracy: 1.0000 - loss: 0.2697 - val_accuracy: 0.0000e+00 - val_loss: 0.7362\n"
          ]
        }
      ],
      "source": [
        "history = model.fit(\n",
        "    X_train,\n",
        "    y_train,\n",
        "    epochs=20,\n",
        "    batch_size=1,\n",
        "    validation_split=0.2\n",
        ")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 283
        },
        "id": "ur0SKpJXmDrT",
        "outputId": "41c70899-b3bc-4dd7-e619-627ec6e4a43e"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1200x500 with 2 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Accuracy Plot\n",
        "plt.figure(figsize=(12, 5))\n",
        "plt.subplot(1, 2, 1)\n",
        "plt.plot(history.history['accuracy'], label='Train Accuracy', marker='o')\n",
        "plt.plot(history.history['val_accuracy'], label='Validation Accuracy', marker='o')\n",
        "plt.title('Model Accuracy')\n",
        "plt.xlabel('Epoch')\n",
        "plt.ylabel('Accuracy')\n",
        "plt.legend()\n",
        "plt.grid(True)\n",
        "\n",
        "# Loss Plot\n",
        "plt.subplot(1, 2, 2)\n",
        "plt.plot(history.history['loss'], label='Train Loss', marker='o')\n",
        "plt.plot(history.history['val_loss'], label='Validation Loss', marker='o')\n",
        "plt.title('Model Loss')\n",
        "plt.xlabel('Epoch')\n",
        "plt.ylabel('Loss')\n",
        "plt.legend()\n",
        "plt.grid(True)\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WS5kr9IOmhtW",
        "outputId": "5f3dd96a-1189-44a5-c085-aa9e6e8d3561"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n"
          ]
        }
      ],
      "source": [
        "model.save(\"lip_reading_model.h5\")\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "id": "90L6dc-Pmk9E",
        "outputId": "5f43a421-3300-47c4-da39-5cd2a2234011"
      },
      "outputs": [
        {
          "data": {
            "application/javascript": [
              "\n",
              "    async function download(id, filename, size) {\n",
              "      if (!google.colab.kernel.accessAllowed) {\n",
              "        return;\n",
              "      }\n",
              "      const div = document.createElement('div');\n",
              "      const label = document.createElement('label');\n",
              "      label.textContent = `Downloading \"${filename}\": `;\n",
              "      div.appendChild(label);\n",
              "      const progress = document.createElement('progress');\n",
              "      progress.max = size;\n",
              "      div.appendChild(progress);\n",
              "      document.body.appendChild(div);\n",
              "\n",
              "      const buffers = [];\n",
              "      let downloaded = 0;\n",
              "\n",
              "      const channel = await google.colab.kernel.comms.open(id);\n",
              "      // Send a message to notify the kernel that we're ready.\n",
              "      channel.send({})\n",
              "\n",
              "      for await (const message of channel.messages) {\n",
              "        // Send a message to notify the kernel that we're ready.\n",
              "        channel.send({})\n",
              "        if (message.buffers) {\n",
              "          for (const buffer of message.buffers) {\n",
              "            buffers.push(buffer);\n",
              "            downloaded += buffer.byteLength;\n",
              "            progress.value = downloaded;\n",
              "          }\n",
              "        }\n",
              "      }\n",
              "      const blob = new Blob(buffers, {type: 'application/binary'});\n",
              "      const a = document.createElement('a');\n",
              "      a.href = window.URL.createObjectURL(blob);\n",
              "      a.download = filename;\n",
              "      div.appendChild(a);\n",
              "      a.click();\n",
              "      div.remove();\n",
              "    }\n",
              "  "
            ],
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "application/javascript": [
              "download(\"download_853ef18c-85ba-417e-9049-c22b6d785f29\", \"lip_reading_model.h5\", 115904672)"
            ],
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "from google.colab import files\n",
        "files.download(\"lip_reading_model.h5\")\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CYC5BLxdofW9"
      },
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "f_xzw49C7hLA",
        "outputId": "a8382c47-735e-4244-e293-e174fbf891af"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Collecting flask-ngrok\n",
            "  Downloading flask_ngrok-0.0.25-py3-none-any.whl.metadata (1.8 kB)\n",
            "Requirement already satisfied: Flask>=0.8 in /usr/local/lib/python3.11/dist-packages (from flask-ngrok) (3.1.0)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.11/dist-packages (from flask-ngrok) (2.32.3)\n",
            "Requirement already satisfied: Werkzeug>=3.1 in /usr/local/lib/python3.11/dist-packages (from Flask>=0.8->flask-ngrok) (3.1.3)\n",
            "Requirement already satisfied: Jinja2>=3.1.2 in /usr/local/lib/python3.11/dist-packages (from Flask>=0.8->flask-ngrok) (3.1.6)\n",
            "Requirement already satisfied: itsdangerous>=2.2 in /usr/local/lib/python3.11/dist-packages (from Flask>=0.8->flask-ngrok) (2.2.0)\n",
            "Requirement already satisfied: click>=8.1.3 in /usr/local/lib/python3.11/dist-packages (from Flask>=0.8->flask-ngrok) (8.1.8)\n",
            "Requirement already satisfied: blinker>=1.9 in /usr/local/lib/python3.11/dist-packages (from Flask>=0.8->flask-ngrok) (1.9.0)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests->flask-ngrok) (3.4.1)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests->flask-ngrok) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests->flask-ngrok) (2.3.0)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests->flask-ngrok) (2025.1.31)\n",
            "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.11/dist-packages (from Jinja2>=3.1.2->Flask>=0.8->flask-ngrok) (3.0.2)\n",
            "Downloading flask_ngrok-0.0.25-py3-none-any.whl (3.1 kB)\n",
            "Installing collected packages: flask-ngrok\n",
            "Successfully installed flask-ngrok-0.0.25\n"
          ]
        }
      ],
      "source": [
        "!pip install flask-ngrok\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "E_Ib2EomLAzM",
        "outputId": "b7a4c779-bd65-4973-a9b5-7a1d54189d98"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Requirement already satisfied: pyngrok in /usr/local/lib/python3.11/dist-packages (7.2.3)\n",
            "Requirement already satisfied: PyYAML>=5.1 in /usr/local/lib/python3.11/dist-packages (from pyngrok) (6.0.2)\n"
          ]
        }
      ],
      "source": [
        "!pip install pyngrok\n",
        "from pyngrok import ngrok\n",
        "ngrok.set_auth_token(\"YOUR_NGROK_AUTH_TOKEN\")\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true,
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZlFCra7pS3XI",
        "outputId": "456ab658-997a-4543-e565-d3d7d65ab55a"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Requirement already satisfied: pyngrok in /usr/local/lib/python3.11/dist-packages (7.2.3)\n",
            "Requirement already satisfied: PyYAML>=5.1 in /usr/local/lib/python3.11/dist-packages (from pyngrok) (6.0.2)\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "WARNING:absl:Compiled the loaded model, but the compiled metrics have yet to be built. `model.compile_metrics` will be empty until you train or evaluate the model.\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "🔥 Public URL: NgrokTunnel: \"https://3d15-35-196-103-69.ngrok-free.app\" -> \"http://localhost:5001\"\n",
            " * Serving Flask app '__main__'\n",
            " * Debug mode: off\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "INFO:werkzeug:\u001b[31m\u001b[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.\u001b[0m\n",
            " * Running on http://127.0.0.1:5001\n",
            "INFO:werkzeug:\u001b[33mPress CTRL+C to quit\u001b[0m\n"
          ]
        }
      ],
      "source": [
        "!pip install pyngrok\n",
        "\n",
        "from pyngrok import ngrok\n",
        "from flask import Flask, request, jsonify\n",
        "from tensorflow.keras.models import load_model\n",
        "import os\n",
        "\n",
        "# ✅ Set your ngrok auth token here\n",
        "ngrok.set_auth_token(\"2vJVtxIXR1N8RCNV4U5bR1ecCck_eRF9V11KAg2ve9Pp69o3\")  # ← Replace with your token\n",
        "\n",
        "# Initialize Flask app\n",
        "app = Flask(__name__)\n",
        "model = load_model(\"lip_reading_model.h5\")\n",
        "\n",
        "# Open ngrok tunnel on port 5001\n",
        "port = 5001\n",
        "public_url = ngrok.connect(port)\n",
        "print(\"🔥 Public URL:\", public_url)\n",
        "\n",
        "@app.route('/predict', methods=['POST'])\n",
        "def predict():\n",
        "    file = request.files['video']\n",
        "    filepath = \"temp.mp4\"\n",
        "    file.save(filepath)\n",
        "\n",
        "    # Dummy prediction (replace this with your model logic)\n",
        "    prediction = \"s1\"\n",
        "\n",
        "    os.remove(filepath)\n",
        "    return jsonify({'prediction': prediction})\n",
        "\n",
        "# Run the Flask app\n",
        "app.run(port=port)\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "UteoPW7Q-8Yo"
      },
      "outputs": [],
      "source": [
        "from google.colab import files\n",
        "uploaded = files.upload()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "h-UoC3BvEPYC"
      },
      "outputs": [],
      "source": [
        "|!pip install pyngrok\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4PsukPuTFcZe",
        "outputId": "3dc9c7c2-ff17-4e29-c01b-69324c06cc08"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Authtoken saved to configuration file: /root/.config/ngrok/ngrok.yml\n"
          ]
        }
      ],
      "source": [
        "!ngrok config add-authtoken 2vJVtxIXR1N8RCNV4U5bR1ecCck_eRF9V11KAg2ve9Pp69o3\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZBk-jCniKRRL",
        "outputId": "141ea1b8-c441-4136-a581-5a812a58e9c6"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Collecting pyngrok\n",
            "  Downloading pyngrok-7.2.3-py3-none-any.whl.metadata (8.7 kB)\n",
            "Requirement already satisfied: PyYAML>=5.1 in /usr/local/lib/python3.11/dist-packages (from pyngrok) (6.0.2)\n",
            "Downloading pyngrok-7.2.3-py3-none-any.whl (23 kB)\n",
            "Installing collected packages: pyngrok\n",
            "Successfully installed pyngrok-7.2.3\n"
          ]
        }
      ],
      "source": [
        "pip install pyngrok\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bF8GO7eeICyS",
        "outputId": "c1e59ca1-5eb1-4efe-8e2f-72b3c391416c"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Requirement already satisfied: flask-cors in /usr/local/lib/python3.11/dist-packages (5.0.1)\n",
            "Requirement already satisfied: flask>=0.9 in /usr/local/lib/python3.11/dist-packages (from flask-cors) (3.1.0)\n",
            "Requirement already satisfied: Werkzeug>=0.7 in /usr/local/lib/python3.11/dist-packages (from flask-cors) (3.1.3)\n",
            "Requirement already satisfied: Jinja2>=3.1.2 in /usr/local/lib/python3.11/dist-packages (from flask>=0.9->flask-cors) (3.1.6)\n",
            "Requirement already satisfied: itsdangerous>=2.2 in /usr/local/lib/python3.11/dist-packages (from flask>=0.9->flask-cors) (2.2.0)\n",
            "Requirement already satisfied: click>=8.1.3 in /usr/local/lib/python3.11/dist-packages (from flask>=0.9->flask-cors) (8.1.8)\n",
            "Requirement already satisfied: blinker>=1.9 in /usr/local/lib/python3.11/dist-packages (from flask>=0.9->flask-cors) (1.9.0)\n",
            "Requirement already satisfied: MarkupSafe>=2.1.1 in /usr/local/lib/python3.11/dist-packages (from Werkzeug>=0.7->flask-cors) (3.0.2)\n"
          ]
        }
      ],
      "source": [
        "!pip install flask-cors\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 512
        },
        "id": "0nJqOJqb_EN3",
        "outputId": "ea00a103-abfb-46f5-b3e7-8481eaa70107"
      },
      "outputs": [
        {
          "ename": "FileNotFoundError",
          "evalue": "[Errno 2] Unable to synchronously open file (unable to open file: name = 'path_to_your_model/lip_reading_model.h5', errno = 2, error message = 'No such file or directory', flags = 0, o_flags = 0)",
          "output_type": "error",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-8-1b591f2e0726>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m \u001b[0;31m# Load the trained model\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 14\u001b[0;31m \u001b[0mmodel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mload_model\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"path_to_your_model/lip_reading_model.h5\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     15\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     16\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/keras/src/saving/saving_api.py\u001b[0m in \u001b[0;36mload_model\u001b[0;34m(filepath, custom_objects, compile, safe_mode)\u001b[0m\n\u001b[1;32m    194\u001b[0m         )\n\u001b[1;32m    195\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mendswith\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\".h5\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\".hdf5\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 196\u001b[0;31m         return legacy_h5_format.load_model_from_hdf5(\n\u001b[0m\u001b[1;32m    197\u001b[0m             \u001b[0mfilepath\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcustom_objects\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcustom_objects\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcompile\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcompile\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    198\u001b[0m         )\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/keras/src/legacy/saving/legacy_h5_format.py\u001b[0m in \u001b[0;36mload_model_from_hdf5\u001b[0;34m(filepath, custom_objects, compile)\u001b[0m\n\u001b[1;32m    114\u001b[0m     \u001b[0mopened_new_file\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mh5py\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mFile\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    115\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mopened_new_file\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 116\u001b[0;31m         \u001b[0mf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mh5py\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mFile\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmode\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"r\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    117\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    118\u001b[0m         \u001b[0mf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfilepath\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/h5py/_hl/files.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, name, mode, driver, libver, userblock_size, swmr, rdcc_nslots, rdcc_nbytes, rdcc_w0, track_order, fs_strategy, fs_persist, fs_threshold, fs_page_size, page_buf_size, min_meta_keep, min_raw_keep, locking, alignment_threshold, alignment_interval, meta_block_size, **kwds)\u001b[0m\n\u001b[1;32m    562\u001b[0m                                  \u001b[0mfs_persist\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfs_persist\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfs_threshold\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfs_threshold\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    563\u001b[0m                                  fs_page_size=fs_page_size)\n\u001b[0;32m--> 564\u001b[0;31m                 \u001b[0mfid\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmake_fid\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0muserblock_size\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfapl\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfcpl\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mswmr\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mswmr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    565\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    566\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlibver\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtuple\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/h5py/_hl/files.py\u001b[0m in \u001b[0;36mmake_fid\u001b[0;34m(name, mode, userblock_size, fapl, fcpl, swmr)\u001b[0m\n\u001b[1;32m    236\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mswmr\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mswmr_support\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    237\u001b[0m             \u001b[0mflags\u001b[0m \u001b[0;34m|=\u001b[0m \u001b[0mh5f\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mACC_SWMR_READ\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 238\u001b[0;31m         \u001b[0mfid\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mh5f\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mflags\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfapl\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfapl\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    239\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0mmode\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'r+'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    240\u001b[0m         \u001b[0mfid\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mh5f\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mh5f\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mACC_RDWR\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfapl\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfapl\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32mh5py/_objects.pyx\u001b[0m in \u001b[0;36mh5py._objects.with_phil.wrapper\u001b[0;34m()\u001b[0m\n",
            "\u001b[0;32mh5py/_objects.pyx\u001b[0m in \u001b[0;36mh5py._objects.with_phil.wrapper\u001b[0;34m()\u001b[0m\n",
            "\u001b[0;32mh5py/h5f.pyx\u001b[0m in \u001b[0;36mh5py.h5f.open\u001b[0;34m()\u001b[0m\n",
            "\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] Unable to synchronously open file (unable to open file: name = 'path_to_your_model/lip_reading_model.h5', errno = 2, error message = 'No such file or directory', flags = 0, o_flags = 0)"
          ]
        }
      ],
      "source": [
        "from flask import Flask, request, jsonify\n",
        "from flask_cors import CORS\n",
        "from pyngrok import ngrok\n",
        "from tensorflow.keras.models import load_model\n",
        "import cv2\n",
        "import numpy as np\n",
        "import os\n",
        "\n",
        "# Initialize Flask app once\n",
        "app = Flask(__name__)\n",
        "CORS(app)  # Enable CORS for all routes\n",
        "\n",
        "# Load the trained model\n",
        "model = load_model(\"path_to_your_model/lip_reading_model.h5\")\n",
        "\n",
        "\n",
        "# Preprocess the uploaded video\n",
        "def preprocess_video(filepath):\n",
        "    cap = cv2.VideoCapture(filepath)\n",
        "    frames = []\n",
        "\n",
        "    while True:\n",
        "        ret, frame = cap.read()\n",
        "        if not ret:\n",
        "            break\n",
        "        resized = cv2.resize(frame, (64, 64))\n",
        "        gray = cv2.cvtColor(resized, cv2.COLOR_BGR2GRAY)\n",
        "        frames.append(gray)\n",
        "\n",
        "    cap.release()\n",
        "    frames_array = np.array(frames)\n",
        "    frames_array = frames_array / 255.0\n",
        "    frames_array = frames_array.reshape(1, frames_array.shape[0], 64, 64, 1)\n",
        "    return frames_array\n",
        "\n",
        "# API endpoint to predict\n",
        "@app.route('/predict', methods=['POST'])\n",
        "def predict():\n",
        "    file = request.files['video']\n",
        "    filepath = \"temp.mp4\"\n",
        "    file.save(filepath)\n",
        "\n",
        "    input_data = preprocess_video(filepath)\n",
        "    prediction = model.predict(input_data)\n",
        "    predicted_class = np.argmax(prediction)\n",
        "\n",
        "    os.remove(filepath)\n",
        "    return jsonify({'prediction': str(predicted_class)})\n",
        "\n",
        "# Start ngrok and run the Flask app\n",
        "if __name__ == \"__main__\":\n",
        "    port = 5001\n",
        "    public_url = ngrok.connect(port)\n",
        "    print(\" Public URL:\", public_url)\n",
        "    app.run(port=port)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "FDPMQZJQKLIF"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "rAgbTMObDslL"
      },
      "outputs": [],
      "source": []
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMCyz/IBUwZQE6xOKYiLMPN",
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}